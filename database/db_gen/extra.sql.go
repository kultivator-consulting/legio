// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: extra.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countExtras = `-- name: CountExtras :one
SELECT
    COUNT(id)
FROM extra
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountExtras(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countExtras)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createExtra = `-- name: CreateExtra :one
INSERT INTO extra (
    id,
    created,
    modified,
    deleted,
    name,
    banner_image,
    code,
    description,
    unit_price,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6
         )
RETURNING id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active
`

type CreateExtraParams struct {
	Name        pgtype.Text    `db:"name" json:"name"`
	BannerImage pgtype.Text    `db:"banner_image" json:"bannerImage"`
	Code        pgtype.Text    `db:"code" json:"code"`
	Description pgtype.Text    `db:"description" json:"description"`
	UnitPrice   pgtype.Numeric `db:"unit_price" json:"unitPrice"`
	IsActive    bool           `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateExtra(ctx context.Context, arg CreateExtraParams) (Extra, error) {
	row := q.db.QueryRow(ctx, createExtra,
		arg.Name,
		arg.BannerImage,
		arg.Code,
		arg.Description,
		arg.UnitPrice,
		arg.IsActive,
	)
	var i Extra
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.BannerImage,
		&i.Code,
		&i.Description,
		&i.UnitPrice,
		&i.IsActive,
	)
	return i, err
}

const deleteExtra = `-- name: DeleteExtra :exec
UPDATE extra
SET deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteExtra(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExtra, id)
	return err
}

const getExtraByCode = `-- name: GetExtraByCode :one
SELECT id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active FROM extra
WHERE code = $1 AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetExtraByCode(ctx context.Context, code pgtype.Text) (Extra, error) {
	row := q.db.QueryRow(ctx, getExtraByCode, code)
	var i Extra
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.BannerImage,
		&i.Code,
		&i.Description,
		&i.UnitPrice,
		&i.IsActive,
	)
	return i, err
}

const getExtraById = `-- name: GetExtraById :one
SELECT id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active FROM extra
WHERE id = $1 AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetExtraById(ctx context.Context, id pgtype.UUID) (Extra, error) {
	row := q.db.QueryRow(ctx, getExtraById, id)
	var i Extra
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.BannerImage,
		&i.Code,
		&i.Description,
		&i.UnitPrice,
		&i.IsActive,
	)
	return i, err
}

const getExtraByName = `-- name: GetExtraByName :one
SELECT id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active FROM extra
WHERE name = $1 AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetExtraByName(ctx context.Context, name pgtype.Text) (Extra, error) {
	row := q.db.QueryRow(ctx, getExtraByName, name)
	var i Extra
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.BannerImage,
		&i.Code,
		&i.Description,
		&i.UnitPrice,
		&i.IsActive,
	)
	return i, err
}

const listExtrasAsc = `-- name: ListExtrasAsc :many
SELECT id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active FROM extra
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListExtrasAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListExtrasAsc(ctx context.Context, arg ListExtrasAscParams) ([]Extra, error) {
	rows, err := q.db.Query(ctx, listExtrasAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Extra
	for rows.Next() {
		var i Extra
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Name,
			&i.BannerImage,
			&i.Code,
			&i.Description,
			&i.UnitPrice,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExtrasDesc = `-- name: ListExtrasDesc :many
SELECT id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active FROM extra
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListExtrasDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListExtrasDesc(ctx context.Context, arg ListExtrasDescParams) ([]Extra, error) {
	rows, err := q.db.Query(ctx, listExtrasDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Extra
	for rows.Next() {
		var i Extra
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Name,
			&i.BannerImage,
			&i.Code,
			&i.Description,
			&i.UnitPrice,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExtra = `-- name: UpdateExtra :one
UPDATE extra
SET
    modified = now() AT TIME ZONE 'UTC',
    name = $2,
    banner_image = $3,
    code = $4,
    description = $5,
    unit_price = $6,
    is_active = $7
WHERE id = $1 AND deleted > now() AT TIME ZONE 'UTC'
RETURNING id, created, modified, deleted, name, banner_image, code, description, unit_price, is_active
`

type UpdateExtraParams struct {
	ID          pgtype.UUID    `db:"id" json:"id"`
	Name        pgtype.Text    `db:"name" json:"name"`
	BannerImage pgtype.Text    `db:"banner_image" json:"bannerImage"`
	Code        pgtype.Text    `db:"code" json:"code"`
	Description pgtype.Text    `db:"description" json:"description"`
	UnitPrice   pgtype.Numeric `db:"unit_price" json:"unitPrice"`
	IsActive    bool           `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateExtra(ctx context.Context, arg UpdateExtraParams) (Extra, error) {
	row := q.db.QueryRow(ctx, updateExtra,
		arg.ID,
		arg.Name,
		arg.BannerImage,
		arg.Code,
		arg.Description,
		arg.UnitPrice,
		arg.IsActive,
	)
	var i Extra
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.BannerImage,
		&i.Code,
		&i.Description,
		&i.UnitPrice,
		&i.IsActive,
	)
	return i, err
}
