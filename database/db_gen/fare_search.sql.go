// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fare_search.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFareSearch = `-- name: CreateFareSearch :one
INSERT INTO fare_search (
    id,
    created,
    modified,
    deleted,
    product_type_id,
    route_start_location_id,
    route_end_location_id,
    travel_date,
    is_return,
    adult_count,
    child_count,
    infant_count
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7, $8
         )
RETURNING id, created, modified, deleted, product_type_id, route_start_location_id, route_end_location_id, travel_date, is_return, adult_count, child_count, infant_count
`

type CreateFareSearchParams struct {
	ProductTypeID        pgtype.UUID        `db:"product_type_id" json:"productTypeId"`
	RouteStartLocationID pgtype.UUID        `db:"route_start_location_id" json:"routeStartLocationId"`
	RouteEndLocationID   pgtype.UUID        `db:"route_end_location_id" json:"routeEndLocationId"`
	TravelDate           pgtype.Timestamptz `db:"travel_date" json:"travelDate"`
	IsReturn             bool               `db:"is_return" json:"isReturn"`
	AdultCount           int32              `db:"adult_count" json:"adultCount"`
	ChildCount           int32              `db:"child_count" json:"childCount"`
	InfantCount          int32              `db:"infant_count" json:"infantCount"`
}

func (q *Queries) CreateFareSearch(ctx context.Context, arg CreateFareSearchParams) (FareSearch, error) {
	row := q.db.QueryRow(ctx, createFareSearch,
		arg.ProductTypeID,
		arg.RouteStartLocationID,
		arg.RouteEndLocationID,
		arg.TravelDate,
		arg.IsReturn,
		arg.AdultCount,
		arg.ChildCount,
		arg.InfantCount,
	)
	var i FareSearch
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ProductTypeID,
		&i.RouteStartLocationID,
		&i.RouteEndLocationID,
		&i.TravelDate,
		&i.IsReturn,
		&i.AdultCount,
		&i.ChildCount,
		&i.InfantCount,
	)
	return i, err
}

const deleteFareSearch = `-- name: DeleteFareSearch :exec
UPDATE fare_search
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteFareSearch(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFareSearch, id)
	return err
}

const getFareSearchById = `-- name: GetFareSearchById :one
SELECT id, created, modified, deleted, product_type_id, route_start_location_id, route_end_location_id, travel_date, is_return, adult_count, child_count, infant_count FROM fare_search
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetFareSearchById(ctx context.Context, id pgtype.UUID) (FareSearch, error) {
	row := q.db.QueryRow(ctx, getFareSearchById, id)
	var i FareSearch
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ProductTypeID,
		&i.RouteStartLocationID,
		&i.RouteEndLocationID,
		&i.TravelDate,
		&i.IsReturn,
		&i.AdultCount,
		&i.ChildCount,
		&i.InfantCount,
	)
	return i, err
}

const updateFareSearch = `-- name: UpdateFareSearch :one
UPDATE fare_search
SET
    modified = now() AT TIME ZONE 'UTC',
    product_type_id = $2,
    route_start_location_id = $3,
    route_end_location_id = $4,
    travel_date = $5,
    is_return = $6,
    adult_count = $7,
    child_count = $8,
    infant_count = $9
WHERE id = $1
RETURNING id, created, modified, deleted, product_type_id, route_start_location_id, route_end_location_id, travel_date, is_return, adult_count, child_count, infant_count
`

type UpdateFareSearchParams struct {
	ID                   pgtype.UUID        `db:"id" json:"id"`
	ProductTypeID        pgtype.UUID        `db:"product_type_id" json:"productTypeId"`
	RouteStartLocationID pgtype.UUID        `db:"route_start_location_id" json:"routeStartLocationId"`
	RouteEndLocationID   pgtype.UUID        `db:"route_end_location_id" json:"routeEndLocationId"`
	TravelDate           pgtype.Timestamptz `db:"travel_date" json:"travelDate"`
	IsReturn             bool               `db:"is_return" json:"isReturn"`
	AdultCount           int32              `db:"adult_count" json:"adultCount"`
	ChildCount           int32              `db:"child_count" json:"childCount"`
	InfantCount          int32              `db:"infant_count" json:"infantCount"`
}

func (q *Queries) UpdateFareSearch(ctx context.Context, arg UpdateFareSearchParams) (FareSearch, error) {
	row := q.db.QueryRow(ctx, updateFareSearch,
		arg.ID,
		arg.ProductTypeID,
		arg.RouteStartLocationID,
		arg.RouteEndLocationID,
		arg.TravelDate,
		arg.IsReturn,
		arg.AdultCount,
		arg.ChildCount,
		arg.InfantCount,
	)
	var i FareSearch
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ProductTypeID,
		&i.RouteStartLocationID,
		&i.RouteEndLocationID,
		&i.TravelDate,
		&i.IsReturn,
		&i.AdultCount,
		&i.ChildCount,
		&i.InfantCount,
	)
	return i, err
}
