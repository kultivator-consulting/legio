// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: content.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countContents = `-- name: CountContents :one
SELECT
    COUNT(id)
FROM content
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountContents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countContents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createContent = `-- name: CreateContent :one
INSERT INTO content (
    id,
    created,
    modified,
    deleted,
    domain_id,
    component_id,
    account_id,
    title,
    slug,
    data,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7
         )
RETURNING id, created, modified, deleted, domain_id, component_id, account_id, title, slug, data, is_active
`

type CreateContentParams struct {
	DomainID    pgtype.UUID `db:"domain_id" json:"domainId"`
	ComponentID pgtype.UUID `db:"component_id" json:"componentId"`
	AccountID   pgtype.UUID `db:"account_id" json:"accountId"`
	Title       string      `db:"title" json:"title"`
	Slug        string      `db:"slug" json:"slug"`
	Data        string      `db:"data" json:"data"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateContent(ctx context.Context, arg CreateContentParams) (Content, error) {
	row := q.db.QueryRow(ctx, createContent,
		arg.DomainID,
		arg.ComponentID,
		arg.AccountID,
		arg.Title,
		arg.Slug,
		arg.Data,
		arg.IsActive,
	)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.ComponentID,
		&i.AccountID,
		&i.Title,
		&i.Slug,
		&i.Data,
		&i.IsActive,
	)
	return i, err
}

const deleteContent = `-- name: DeleteContent :exec
UPDATE content
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteContent(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContent, id)
	return err
}

const getContentByDomainIdAndSlug = `-- name: GetContentByDomainIdAndSlug :one
SELECT id, created, modified, deleted, domain_id, component_id, account_id, title, slug, data, is_active FROM content
WHERE domain_id = $1
  AND slug = $2
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

type GetContentByDomainIdAndSlugParams struct {
	DomainID pgtype.UUID `db:"domain_id" json:"domainId"`
	Slug     string      `db:"slug" json:"slug"`
}

func (q *Queries) GetContentByDomainIdAndSlug(ctx context.Context, arg GetContentByDomainIdAndSlugParams) (Content, error) {
	row := q.db.QueryRow(ctx, getContentByDomainIdAndSlug, arg.DomainID, arg.Slug)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.ComponentID,
		&i.AccountID,
		&i.Title,
		&i.Slug,
		&i.Data,
		&i.IsActive,
	)
	return i, err
}

const getContentById = `-- name: GetContentById :one
SELECT id, created, modified, deleted, domain_id, component_id, account_id, title, slug, data, is_active FROM content
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetContentById(ctx context.Context, id pgtype.UUID) (Content, error) {
	row := q.db.QueryRow(ctx, getContentById, id)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.ComponentID,
		&i.AccountID,
		&i.Title,
		&i.Slug,
		&i.Data,
		&i.IsActive,
	)
	return i, err
}

const listContentsAsc = `-- name: ListContentsAsc :many
SELECT id, created, modified, deleted, domain_id, component_id, account_id, title, slug, data, is_active FROM content
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListContentsAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListContentsAsc(ctx context.Context, arg ListContentsAscParams) ([]Content, error) {
	rows, err := q.db.Query(ctx, listContentsAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Content
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.DomainID,
			&i.ComponentID,
			&i.AccountID,
			&i.Title,
			&i.Slug,
			&i.Data,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContentsDesc = `-- name: ListContentsDesc :many
SELECT id, created, modified, deleted, domain_id, component_id, account_id, title, slug, data, is_active FROM content
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListContentsDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListContentsDesc(ctx context.Context, arg ListContentsDescParams) ([]Content, error) {
	rows, err := q.db.Query(ctx, listContentsDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Content
	for rows.Next() {
		var i Content
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.DomainID,
			&i.ComponentID,
			&i.AccountID,
			&i.Title,
			&i.Slug,
			&i.Data,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContent = `-- name: UpdateContent :one
UPDATE content
SET
    modified = now() AT TIME ZONE 'UTC',
    domain_id = $2,
    component_id = $3,
    account_id = $4,
    title = $5,
    slug = $6,
    data = $7,
    is_active = $8
WHERE id = $1
RETURNING id, created, modified, deleted, domain_id, component_id, account_id, title, slug, data, is_active
`

type UpdateContentParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	DomainID    pgtype.UUID `db:"domain_id" json:"domainId"`
	ComponentID pgtype.UUID `db:"component_id" json:"componentId"`
	AccountID   pgtype.UUID `db:"account_id" json:"accountId"`
	Title       string      `db:"title" json:"title"`
	Slug        string      `db:"slug" json:"slug"`
	Data        string      `db:"data" json:"data"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateContent(ctx context.Context, arg UpdateContentParams) (Content, error) {
	row := q.db.QueryRow(ctx, updateContent,
		arg.ID,
		arg.DomainID,
		arg.ComponentID,
		arg.AccountID,
		arg.Title,
		arg.Slug,
		arg.Data,
		arg.IsActive,
	)
	var i Content
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.ComponentID,
		&i.AccountID,
		&i.Title,
		&i.Slug,
		&i.Data,
		&i.IsActive,
	)
	return i, err
}
