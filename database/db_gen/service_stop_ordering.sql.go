// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service_stop_ordering.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countServiceStopOrderingsByServiceId = `-- name: CountServiceStopOrderingsByServiceId :one
SELECT
    COUNT(id)
FROM service_stop_ordering
WHERE service_id = $1
`

func (q *Queries) CountServiceStopOrderingsByServiceId(ctx context.Context, serviceID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countServiceStopOrderingsByServiceId, serviceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createServiceStopOrdering = `-- name: CreateServiceStopOrdering :one
INSERT INTO service_stop_ordering (
    id,
    created,
    modified,
    service_id,
    location_id,
    ordering
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3
         )
RETURNING id, created, modified, service_id, location_id, ordering
`

type CreateServiceStopOrderingParams struct {
	ServiceID  pgtype.UUID `db:"service_id" json:"serviceId"`
	LocationID pgtype.UUID `db:"location_id" json:"locationId"`
	Ordering   int32       `db:"ordering" json:"ordering"`
}

func (q *Queries) CreateServiceStopOrdering(ctx context.Context, arg CreateServiceStopOrderingParams) (ServiceStopOrdering, error) {
	row := q.db.QueryRow(ctx, createServiceStopOrdering, arg.ServiceID, arg.LocationID, arg.Ordering)
	var i ServiceStopOrdering
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.LocationID,
		&i.Ordering,
	)
	return i, err
}

const deleteServiceStopOrdering = `-- name: DeleteServiceStopOrdering :exec
DELETE FROM service_stop_ordering
WHERE id = $1
`

func (q *Queries) DeleteServiceStopOrdering(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceStopOrdering, id)
	return err
}

const deleteServiceStopOrderingByServiceId = `-- name: DeleteServiceStopOrderingByServiceId :exec
DELETE FROM service_stop_ordering
WHERE service_id = $1
`

func (q *Queries) DeleteServiceStopOrderingByServiceId(ctx context.Context, serviceID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceStopOrderingByServiceId, serviceID)
	return err
}

const getServiceStopOrderingById = `-- name: GetServiceStopOrderingById :one
SELECT id, created, modified, service_id, location_id, ordering FROM service_stop_ordering
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetServiceStopOrderingById(ctx context.Context, id pgtype.UUID) (ServiceStopOrdering, error) {
	row := q.db.QueryRow(ctx, getServiceStopOrderingById, id)
	var i ServiceStopOrdering
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.LocationID,
		&i.Ordering,
	)
	return i, err
}

const listServiceStopOrderingsByServiceId = `-- name: ListServiceStopOrderingsByServiceId :many
SELECT id, created, modified, service_id, location_id, ordering FROM service_stop_ordering
WHERE service_id = $1
ORDER BY ordering
`

func (q *Queries) ListServiceStopOrderingsByServiceId(ctx context.Context, serviceID pgtype.UUID) ([]ServiceStopOrdering, error) {
	rows, err := q.db.Query(ctx, listServiceStopOrderingsByServiceId, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceStopOrdering
	for rows.Next() {
		var i ServiceStopOrdering
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ServiceID,
			&i.LocationID,
			&i.Ordering,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceStopOrdering = `-- name: UpdateServiceStopOrdering :one
UPDATE service_stop_ordering
SET
    modified = now() AT TIME ZONE 'UTC',
    service_id = $2,
    location_id = $3,
    ordering = $4
WHERE id = $1
RETURNING id, created, modified, service_id, location_id, ordering
`

type UpdateServiceStopOrderingParams struct {
	ID         pgtype.UUID `db:"id" json:"id"`
	ServiceID  pgtype.UUID `db:"service_id" json:"serviceId"`
	LocationID pgtype.UUID `db:"location_id" json:"locationId"`
	Ordering   int32       `db:"ordering" json:"ordering"`
}

func (q *Queries) UpdateServiceStopOrdering(ctx context.Context, arg UpdateServiceStopOrderingParams) (ServiceStopOrdering, error) {
	row := q.db.QueryRow(ctx, updateServiceStopOrdering,
		arg.ID,
		arg.ServiceID,
		arg.LocationID,
		arg.Ordering,
	)
	var i ServiceStopOrdering
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.LocationID,
		&i.Ordering,
	)
	return i, err
}
