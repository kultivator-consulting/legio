// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service_note.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countServiceNotesByServiceId = `-- name: CountServiceNotesByServiceId :one
SELECT
    COUNT(id)
FROM service_note
WHERE service_id = $1
`

func (q *Queries) CountServiceNotesByServiceId(ctx context.Context, serviceID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countServiceNotesByServiceId, serviceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createServiceNote = `-- name: CreateServiceNote :one
INSERT INTO service_note (
    id,
    created,
    modified,
    service_id,
    note
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, service_id, note
`

type CreateServiceNoteParams struct {
	ServiceID pgtype.UUID `db:"service_id" json:"serviceId"`
	Note      string      `db:"note" json:"note"`
}

func (q *Queries) CreateServiceNote(ctx context.Context, arg CreateServiceNoteParams) (ServiceNote, error) {
	row := q.db.QueryRow(ctx, createServiceNote, arg.ServiceID, arg.Note)
	var i ServiceNote
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Note,
	)
	return i, err
}

const deleteServiceNote = `-- name: DeleteServiceNote :exec
DELETE FROM service_note
WHERE id = $1
`

func (q *Queries) DeleteServiceNote(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceNote, id)
	return err
}

const deleteServiceNoteByServiceId = `-- name: DeleteServiceNoteByServiceId :exec
DELETE FROM service_note
WHERE service_id = $1
`

func (q *Queries) DeleteServiceNoteByServiceId(ctx context.Context, serviceID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceNoteByServiceId, serviceID)
	return err
}

const getServiceNoteById = `-- name: GetServiceNoteById :one
SELECT id, created, modified, service_id, note FROM service_note
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetServiceNoteById(ctx context.Context, id pgtype.UUID) (ServiceNote, error) {
	row := q.db.QueryRow(ctx, getServiceNoteById, id)
	var i ServiceNote
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Note,
	)
	return i, err
}

const getServiceNoteByServiceId = `-- name: GetServiceNoteByServiceId :one
SELECT id, created, modified, service_id, note FROM service_note
WHERE service_id = $1
LIMIT 1
`

func (q *Queries) GetServiceNoteByServiceId(ctx context.Context, serviceID pgtype.UUID) (ServiceNote, error) {
	row := q.db.QueryRow(ctx, getServiceNoteByServiceId, serviceID)
	var i ServiceNote
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Note,
	)
	return i, err
}

const listServiceNotesByServiceId = `-- name: ListServiceNotesByServiceId :many
SELECT id, created, modified, service_id, note FROM service_note
WHERE service_id = $1
`

func (q *Queries) ListServiceNotesByServiceId(ctx context.Context, serviceID pgtype.UUID) ([]ServiceNote, error) {
	rows, err := q.db.Query(ctx, listServiceNotesByServiceId, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceNote
	for rows.Next() {
		var i ServiceNote
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ServiceID,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceNote = `-- name: UpdateServiceNote :one
UPDATE service_note
SET
    modified = now() AT TIME ZONE 'UTC',
    service_id = $2,
    note = $3
WHERE id = $1
RETURNING id, created, modified, service_id, note
`

type UpdateServiceNoteParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	ServiceID pgtype.UUID `db:"service_id" json:"serviceId"`
	Note      string      `db:"note" json:"note"`
}

func (q *Queries) UpdateServiceNote(ctx context.Context, arg UpdateServiceNoteParams) (ServiceNote, error) {
	row := q.db.QueryRow(ctx, updateServiceNote, arg.ID, arg.ServiceID, arg.Note)
	var i ServiceNote
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Note,
	)
	return i, err
}
