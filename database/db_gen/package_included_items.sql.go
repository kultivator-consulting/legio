// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package_included_items.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackageIncludedItemsByPackageId = `-- name: CountPackageIncludedItemsByPackageId :one
SELECT
    COUNT(id)
FROM package_included_items
WHERE package_id = $1
`

func (q *Queries) CountPackageIncludedItemsByPackageId(ctx context.Context, packageID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPackageIncludedItemsByPackageId, packageID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackageIncludedItems = `-- name: CreatePackageIncludedItems :one
INSERT INTO package_included_items (
    id,
    created,
    modified,
    package_id,
    ordering,
    type,
    description,
    item_icon,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6
         )
RETURNING id, created, modified, package_id, ordering, type, description, item_icon, is_active
`

type CreatePackageIncludedItemsParams struct {
	PackageID   pgtype.UUID `db:"package_id" json:"packageId"`
	Ordering    int32       `db:"ordering" json:"ordering"`
	Type        string      `db:"type" json:"type"`
	Description pgtype.Text `db:"description" json:"description"`
	ItemIcon    string      `db:"item_icon" json:"itemIcon"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreatePackageIncludedItems(ctx context.Context, arg CreatePackageIncludedItemsParams) (PackageIncludedItems, error) {
	row := q.db.QueryRow(ctx, createPackageIncludedItems,
		arg.PackageID,
		arg.Ordering,
		arg.Type,
		arg.Description,
		arg.ItemIcon,
		arg.IsActive,
	)
	var i PackageIncludedItems
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Ordering,
		&i.Type,
		&i.Description,
		&i.ItemIcon,
		&i.IsActive,
	)
	return i, err
}

const deletePackageIncludedItems = `-- name: DeletePackageIncludedItems :exec
DELETE FROM package_included_items
WHERE id = $1
`

func (q *Queries) DeletePackageIncludedItems(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageIncludedItems, id)
	return err
}

const deletePackageIncludedItemsByPackageId = `-- name: DeletePackageIncludedItemsByPackageId :exec
DELETE FROM package_included_items
WHERE package_id = $1
`

func (q *Queries) DeletePackageIncludedItemsByPackageId(ctx context.Context, packageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageIncludedItemsByPackageId, packageID)
	return err
}

const getPackageIncludedItemsById = `-- name: GetPackageIncludedItemsById :one
SELECT id, created, modified, package_id, ordering, type, description, item_icon, is_active FROM package_included_items
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPackageIncludedItemsById(ctx context.Context, id pgtype.UUID) (PackageIncludedItems, error) {
	row := q.db.QueryRow(ctx, getPackageIncludedItemsById, id)
	var i PackageIncludedItems
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Ordering,
		&i.Type,
		&i.Description,
		&i.ItemIcon,
		&i.IsActive,
	)
	return i, err
}

const getPackageIncludedItemsByPackageId = `-- name: GetPackageIncludedItemsByPackageId :many
SELECT id, created, modified, package_id, ordering, type, description, item_icon, is_active FROM package_included_items
WHERE package_id = $1
`

func (q *Queries) GetPackageIncludedItemsByPackageId(ctx context.Context, packageID pgtype.UUID) ([]PackageIncludedItems, error) {
	rows, err := q.db.Query(ctx, getPackageIncludedItemsByPackageId, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageIncludedItems
	for rows.Next() {
		var i PackageIncludedItems
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Ordering,
			&i.Type,
			&i.Description,
			&i.ItemIcon,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageIncludedItemsByPackageIdAsc = `-- name: ListPackageIncludedItemsByPackageIdAsc :many
SELECT id, created, modified, package_id, ordering, type, description, item_icon, is_active FROM package_included_items
WHERE package_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageIncludedItemsByPackageIdAscParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageIncludedItemsByPackageIdAsc(ctx context.Context, arg ListPackageIncludedItemsByPackageIdAscParams) ([]PackageIncludedItems, error) {
	rows, err := q.db.Query(ctx, listPackageIncludedItemsByPackageIdAsc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageIncludedItems
	for rows.Next() {
		var i PackageIncludedItems
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Ordering,
			&i.Type,
			&i.Description,
			&i.ItemIcon,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageIncludedItemsByPackageIdDesc = `-- name: ListPackageIncludedItemsByPackageIdDesc :many
SELECT id, created, modified, package_id, ordering, type, description, item_icon, is_active FROM package_included_items
WHERE package_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageIncludedItemsByPackageIdDescParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageIncludedItemsByPackageIdDesc(ctx context.Context, arg ListPackageIncludedItemsByPackageIdDescParams) ([]PackageIncludedItems, error) {
	rows, err := q.db.Query(ctx, listPackageIncludedItemsByPackageIdDesc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageIncludedItems
	for rows.Next() {
		var i PackageIncludedItems
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Ordering,
			&i.Type,
			&i.Description,
			&i.ItemIcon,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackageIncludedItems = `-- name: UpdatePackageIncludedItems :one
UPDATE package_included_items
SET
    modified = now() AT TIME ZONE 'UTC',
    package_id = $2,
    ordering = $3,
    type = $4,
    description = $5,
    item_icon = $6,
    is_active = $7
WHERE id = $1
RETURNING id, created, modified, package_id, ordering, type, description, item_icon, is_active
`

type UpdatePackageIncludedItemsParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	PackageID   pgtype.UUID `db:"package_id" json:"packageId"`
	Ordering    int32       `db:"ordering" json:"ordering"`
	Type        string      `db:"type" json:"type"`
	Description pgtype.Text `db:"description" json:"description"`
	ItemIcon    string      `db:"item_icon" json:"itemIcon"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdatePackageIncludedItems(ctx context.Context, arg UpdatePackageIncludedItemsParams) (PackageIncludedItems, error) {
	row := q.db.QueryRow(ctx, updatePackageIncludedItems,
		arg.ID,
		arg.PackageID,
		arg.Ordering,
		arg.Type,
		arg.Description,
		arg.ItemIcon,
		arg.IsActive,
	)
	var i PackageIncludedItems
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Ordering,
		&i.Type,
		&i.Description,
		&i.ItemIcon,
		&i.IsActive,
	)
	return i, err
}
