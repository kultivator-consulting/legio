// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: content_collection.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createContentCollectionAndReturnId = `-- name: CreateContentCollectionAndReturnId :one
INSERT INTO content_collection (
    id,
    created,
    modified,
    deleted,
    parent_id,
    content_id,
    ordering,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4
         )
RETURNING id
`

type CreateContentCollectionAndReturnIdParams struct {
	ParentID  pgtype.UUID `db:"parent_id" json:"parentId"`
	ContentID pgtype.UUID `db:"content_id" json:"contentId"`
	Ordering  int32       `db:"ordering" json:"ordering"`
	IsActive  bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateContentCollectionAndReturnId(ctx context.Context, arg CreateContentCollectionAndReturnIdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createContentCollectionAndReturnId,
		arg.ParentID,
		arg.ContentID,
		arg.Ordering,
		arg.IsActive,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteContentCollection = `-- name: DeleteContentCollection :exec
UPDATE content_collection
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteContentCollection(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteContentCollection, id)
	return err
}

const deleteContentCollectionByIdAndParentId = `-- name: DeleteContentCollectionByIdAndParentId :exec
UPDATE content_collection
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
  AND parent_id = $2
`

type DeleteContentCollectionByIdAndParentIdParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	ParentID pgtype.UUID `db:"parent_id" json:"parentId"`
}

func (q *Queries) DeleteContentCollectionByIdAndParentId(ctx context.Context, arg DeleteContentCollectionByIdAndParentIdParams) error {
	_, err := q.db.Exec(ctx, deleteContentCollectionByIdAndParentId, arg.ID, arg.ParentID)
	return err
}

const getContentCollectionById = `-- name: GetContentCollectionById :one
SELECT id, created, modified, deleted, parent_id, content_id, ordering, is_active FROM content_collection
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetContentCollectionById(ctx context.Context, id pgtype.UUID) (ContentCollection, error) {
	row := q.db.QueryRow(ctx, getContentCollectionById, id)
	var i ContentCollection
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ParentID,
		&i.ContentID,
		&i.Ordering,
		&i.IsActive,
	)
	return i, err
}

const getContentCollectionByParentIdAndContentId = `-- name: GetContentCollectionByParentIdAndContentId :one
SELECT id, created, modified, deleted, parent_id, content_id, ordering, is_active FROM content_collection
WHERE parent_id = $1
  AND content_id = $2
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

type GetContentCollectionByParentIdAndContentIdParams struct {
	ParentID  pgtype.UUID `db:"parent_id" json:"parentId"`
	ContentID pgtype.UUID `db:"content_id" json:"contentId"`
}

func (q *Queries) GetContentCollectionByParentIdAndContentId(ctx context.Context, arg GetContentCollectionByParentIdAndContentIdParams) (ContentCollection, error) {
	row := q.db.QueryRow(ctx, getContentCollectionByParentIdAndContentId, arg.ParentID, arg.ContentID)
	var i ContentCollection
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ParentID,
		&i.ContentID,
		&i.Ordering,
		&i.IsActive,
	)
	return i, err
}

const listContentCollectionByParentId = `-- name: ListContentCollectionByParentId :many
SELECT id, created, modified, deleted, parent_id, content_id, ordering, is_active FROM content_collection
WHERE parent_id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
ORDER BY ordering
`

func (q *Queries) ListContentCollectionByParentId(ctx context.Context, parentID pgtype.UUID) ([]ContentCollection, error) {
	rows, err := q.db.Query(ctx, listContentCollectionByParentId, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ContentCollection
	for rows.Next() {
		var i ContentCollection
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.ParentID,
			&i.ContentID,
			&i.Ordering,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateContentCollectionById = `-- name: UpdateContentCollectionById :one
UPDATE content_collection
SET
    modified = now() AT TIME ZONE 'UTC',
    parent_id = $2,
    content_id = $3,
    ordering = $4,
    is_active = $5
WHERE id = $1
RETURNING id, created, modified, deleted, parent_id, content_id, ordering, is_active
`

type UpdateContentCollectionByIdParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	ParentID  pgtype.UUID `db:"parent_id" json:"parentId"`
	ContentID pgtype.UUID `db:"content_id" json:"contentId"`
	Ordering  int32       `db:"ordering" json:"ordering"`
	IsActive  bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateContentCollectionById(ctx context.Context, arg UpdateContentCollectionByIdParams) (ContentCollection, error) {
	row := q.db.QueryRow(ctx, updateContentCollectionById,
		arg.ID,
		arg.ParentID,
		arg.ContentID,
		arg.Ordering,
		arg.IsActive,
	)
	var i ContentCollection
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ParentID,
		&i.ContentID,
		&i.Ordering,
		&i.IsActive,
	)
	return i, err
}
