// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service_terms_conditions.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countServiceTermsConditionsByServiceId = `-- name: CountServiceTermsConditionsByServiceId :one
SELECT
    COUNT(id)
FROM service_terms_conditions
WHERE service_id = $1
`

func (q *Queries) CountServiceTermsConditionsByServiceId(ctx context.Context, serviceID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countServiceTermsConditionsByServiceId, serviceID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createServiceTermsConditions = `-- name: CreateServiceTermsConditions :one
INSERT INTO service_terms_conditions (
    id,
    created,
    modified,
    service_id,
    ordering,
    general_terms,
    luggage_notes,
    additional_notes
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5
         )
RETURNING id, created, modified, service_id, ordering, general_terms, luggage_notes, additional_notes
`

type CreateServiceTermsConditionsParams struct {
	ServiceID       pgtype.UUID `db:"service_id" json:"serviceId"`
	Ordering        int32       `db:"ordering" json:"ordering"`
	GeneralTerms    pgtype.Text `db:"general_terms" json:"generalTerms"`
	LuggageNotes    pgtype.Text `db:"luggage_notes" json:"luggageNotes"`
	AdditionalNotes pgtype.Text `db:"additional_notes" json:"additionalNotes"`
}

func (q *Queries) CreateServiceTermsConditions(ctx context.Context, arg CreateServiceTermsConditionsParams) (ServiceTermsConditions, error) {
	row := q.db.QueryRow(ctx, createServiceTermsConditions,
		arg.ServiceID,
		arg.Ordering,
		arg.GeneralTerms,
		arg.LuggageNotes,
		arg.AdditionalNotes,
	)
	var i ServiceTermsConditions
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Ordering,
		&i.GeneralTerms,
		&i.LuggageNotes,
		&i.AdditionalNotes,
	)
	return i, err
}

const deleteServiceTermsConditions = `-- name: DeleteServiceTermsConditions :exec
DELETE FROM service_terms_conditions
WHERE id = $1
`

func (q *Queries) DeleteServiceTermsConditions(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceTermsConditions, id)
	return err
}

const deleteServiceTermsConditionsByServiceId = `-- name: DeleteServiceTermsConditionsByServiceId :exec
DELETE FROM service_terms_conditions
WHERE service_id = $1
`

func (q *Queries) DeleteServiceTermsConditionsByServiceId(ctx context.Context, serviceID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteServiceTermsConditionsByServiceId, serviceID)
	return err
}

const getServiceTermsConditionsById = `-- name: GetServiceTermsConditionsById :one
SELECT id, created, modified, service_id, ordering, general_terms, luggage_notes, additional_notes FROM service_terms_conditions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetServiceTermsConditionsById(ctx context.Context, id pgtype.UUID) (ServiceTermsConditions, error) {
	row := q.db.QueryRow(ctx, getServiceTermsConditionsById, id)
	var i ServiceTermsConditions
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Ordering,
		&i.GeneralTerms,
		&i.LuggageNotes,
		&i.AdditionalNotes,
	)
	return i, err
}

const getServiceTermsConditionsByServiceId = `-- name: GetServiceTermsConditionsByServiceId :one
SELECT id, created, modified, service_id, ordering, general_terms, luggage_notes, additional_notes FROM service_terms_conditions
WHERE service_id = $1
LIMIT 1
`

func (q *Queries) GetServiceTermsConditionsByServiceId(ctx context.Context, serviceID pgtype.UUID) (ServiceTermsConditions, error) {
	row := q.db.QueryRow(ctx, getServiceTermsConditionsByServiceId, serviceID)
	var i ServiceTermsConditions
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Ordering,
		&i.GeneralTerms,
		&i.LuggageNotes,
		&i.AdditionalNotes,
	)
	return i, err
}

const listServiceTermsConditionsByServiceId = `-- name: ListServiceTermsConditionsByServiceId :many
SELECT id, created, modified, service_id, ordering, general_terms, luggage_notes, additional_notes FROM service_terms_conditions
WHERE service_id = $1
`

func (q *Queries) ListServiceTermsConditionsByServiceId(ctx context.Context, serviceID pgtype.UUID) ([]ServiceTermsConditions, error) {
	rows, err := q.db.Query(ctx, listServiceTermsConditionsByServiceId, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceTermsConditions
	for rows.Next() {
		var i ServiceTermsConditions
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ServiceID,
			&i.Ordering,
			&i.GeneralTerms,
			&i.LuggageNotes,
			&i.AdditionalNotes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceTermsConditions = `-- name: UpdateServiceTermsConditions :one
UPDATE service_terms_conditions
SET
    modified = now() AT TIME ZONE 'UTC',
    service_id = $2,
    ordering = $3,
    general_terms = $4,
    luggage_notes = $5,
    additional_notes = $6
WHERE id = $1
RETURNING id, created, modified, service_id, ordering, general_terms, luggage_notes, additional_notes
`

type UpdateServiceTermsConditionsParams struct {
	ID              pgtype.UUID `db:"id" json:"id"`
	ServiceID       pgtype.UUID `db:"service_id" json:"serviceId"`
	Ordering        int32       `db:"ordering" json:"ordering"`
	GeneralTerms    pgtype.Text `db:"general_terms" json:"generalTerms"`
	LuggageNotes    pgtype.Text `db:"luggage_notes" json:"luggageNotes"`
	AdditionalNotes pgtype.Text `db:"additional_notes" json:"additionalNotes"`
}

func (q *Queries) UpdateServiceTermsConditions(ctx context.Context, arg UpdateServiceTermsConditionsParams) (ServiceTermsConditions, error) {
	row := q.db.QueryRow(ctx, updateServiceTermsConditions,
		arg.ID,
		arg.ServiceID,
		arg.Ordering,
		arg.GeneralTerms,
		arg.LuggageNotes,
		arg.AdditionalNotes,
	)
	var i ServiceTermsConditions
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ServiceID,
		&i.Ordering,
		&i.GeneralTerms,
		&i.LuggageNotes,
		&i.AdditionalNotes,
	)
	return i, err
}
