// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product_type_domain.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProductTypeDomainsByProductTypeId = `-- name: CountProductTypeDomainsByProductTypeId :one
SELECT
    COUNT(id)
FROM product_type_domain
WHERE product_type_id = $1
`

func (q *Queries) CountProductTypeDomainsByProductTypeId(ctx context.Context, productTypeID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countProductTypeDomainsByProductTypeId, productTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProductTypeDomain = `-- name: CreateProductTypeDomain :one
INSERT INTO product_type_domain (
    id,
    created,
    modified,
    product_type_id,
    domain_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, product_type_id, domain_id
`

type CreateProductTypeDomainParams struct {
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
	DomainID      pgtype.UUID `db:"domain_id" json:"domainId"`
}

func (q *Queries) CreateProductTypeDomain(ctx context.Context, arg CreateProductTypeDomainParams) (ProductTypeDomain, error) {
	row := q.db.QueryRow(ctx, createProductTypeDomain, arg.ProductTypeID, arg.DomainID)
	var i ProductTypeDomain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ProductTypeID,
		&i.DomainID,
	)
	return i, err
}

const deleteProductTypeDomain = `-- name: DeleteProductTypeDomain :exec
DELETE FROM product_type_domain
WHERE id = $1
`

func (q *Queries) DeleteProductTypeDomain(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductTypeDomain, id)
	return err
}

const deleteProductTypeDomainsByProductTypeId = `-- name: DeleteProductTypeDomainsByProductTypeId :exec
DELETE FROM product_type_domain
WHERE product_type_id = $1
`

func (q *Queries) DeleteProductTypeDomainsByProductTypeId(ctx context.Context, productTypeID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProductTypeDomainsByProductTypeId, productTypeID)
	return err
}

const getProductTypeDomainById = `-- name: GetProductTypeDomainById :one
SELECT id, created, modified, product_type_id, domain_id FROM product_type_domain
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProductTypeDomainById(ctx context.Context, id pgtype.UUID) (ProductTypeDomain, error) {
	row := q.db.QueryRow(ctx, getProductTypeDomainById, id)
	var i ProductTypeDomain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ProductTypeID,
		&i.DomainID,
	)
	return i, err
}

const listProductTypeDomainsByProductTypeId = `-- name: ListProductTypeDomainsByProductTypeId :many
SELECT id, created, modified, product_type_id, domain_id FROM product_type_domain
WHERE product_type_id = $1
`

func (q *Queries) ListProductTypeDomainsByProductTypeId(ctx context.Context, productTypeID pgtype.UUID) ([]ProductTypeDomain, error) {
	rows, err := q.db.Query(ctx, listProductTypeDomainsByProductTypeId, productTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductTypeDomain
	for rows.Next() {
		var i ProductTypeDomain
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ProductTypeID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProductTypeDomain = `-- name: UpdateProductTypeDomain :one
UPDATE product_type_domain
SET
    modified = now() AT TIME ZONE 'UTC',
    product_type_id = $2,
    domain_id = $3
WHERE id = $1
RETURNING id, created, modified, product_type_id, domain_id
`

type UpdateProductTypeDomainParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
	DomainID      pgtype.UUID `db:"domain_id" json:"domainId"`
}

func (q *Queries) UpdateProductTypeDomain(ctx context.Context, arg UpdateProductTypeDomainParams) (ProductTypeDomain, error) {
	row := q.db.QueryRow(ctx, updateProductTypeDomain, arg.ID, arg.ProductTypeID, arg.DomainID)
	var i ProductTypeDomain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ProductTypeID,
		&i.DomainID,
	)
	return i, err
}
