// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: extra_operators.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countExtraOperatorsByExtraId = `-- name: CountExtraOperatorsByExtraId :one
SELECT
    COUNT(id)
FROM extra_operator
WHERE extra_id = $1
`

func (q *Queries) CountExtraOperatorsByExtraId(ctx context.Context, extraID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExtraOperatorsByExtraId, extraID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countExtraOperatorsByOperatorId = `-- name: CountExtraOperatorsByOperatorId :one
SELECT
    COUNT(id)
FROM extra_operator
WHERE operator_id = $1
`

func (q *Queries) CountExtraOperatorsByOperatorId(ctx context.Context, operatorID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExtraOperatorsByOperatorId, operatorID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createExtraOperator = `-- name: CreateExtraOperator :one
INSERT INTO extra_operator (
    id,
    created,
    modified,
    extra_id,
    operator_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, extra_id, operator_id
`

type CreateExtraOperatorParams struct {
	ExtraID    pgtype.UUID `db:"extra_id" json:"extraId"`
	OperatorID pgtype.UUID `db:"operator_id" json:"operatorId"`
}

func (q *Queries) CreateExtraOperator(ctx context.Context, arg CreateExtraOperatorParams) (ExtraOperator, error) {
	row := q.db.QueryRow(ctx, createExtraOperator, arg.ExtraID, arg.OperatorID)
	var i ExtraOperator
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ExtraID,
		&i.OperatorID,
	)
	return i, err
}

const deleteExtraOperator = `-- name: DeleteExtraOperator :exec
DELETE FROM extra_operator
WHERE id = $1
`

func (q *Queries) DeleteExtraOperator(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExtraOperator, id)
	return err
}

const deleteExtraOperatorByExtraId = `-- name: DeleteExtraOperatorByExtraId :exec
DELETE FROM extra_operator
WHERE extra_id = $1
`

func (q *Queries) DeleteExtraOperatorByExtraId(ctx context.Context, extraID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExtraOperatorByExtraId, extraID)
	return err
}

const getExtraOperatorById = `-- name: GetExtraOperatorById :one
SELECT id, created, modified, extra_id, operator_id FROM extra_operator
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetExtraOperatorById(ctx context.Context, id pgtype.UUID) (ExtraOperator, error) {
	row := q.db.QueryRow(ctx, getExtraOperatorById, id)
	var i ExtraOperator
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ExtraID,
		&i.OperatorID,
	)
	return i, err
}

const listExtraOperatorsByExtraId = `-- name: ListExtraOperatorsByExtraId :many
SELECT id, created, modified, extra_id, operator_id FROM extra_operator
WHERE extra_id = $1
`

func (q *Queries) ListExtraOperatorsByExtraId(ctx context.Context, extraID pgtype.UUID) ([]ExtraOperator, error) {
	rows, err := q.db.Query(ctx, listExtraOperatorsByExtraId, extraID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExtraOperator
	for rows.Next() {
		var i ExtraOperator
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ExtraID,
			&i.OperatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExtraOperatorsByOperatorId = `-- name: ListExtraOperatorsByOperatorId :many
SELECT id, created, modified, extra_id, operator_id FROM extra_operator
WHERE operator_id = $1
`

func (q *Queries) ListExtraOperatorsByOperatorId(ctx context.Context, operatorID pgtype.UUID) ([]ExtraOperator, error) {
	rows, err := q.db.Query(ctx, listExtraOperatorsByOperatorId, operatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExtraOperator
	for rows.Next() {
		var i ExtraOperator
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ExtraID,
			&i.OperatorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExtraOperator = `-- name: UpdateExtraOperator :one
UPDATE extra_operator
SET
    modified = now() AT TIME ZONE 'UTC',
    extra_id = $2,
    operator_id = $3
WHERE id = $1
RETURNING id, created, modified, extra_id, operator_id
`

type UpdateExtraOperatorParams struct {
	ID         pgtype.UUID `db:"id" json:"id"`
	ExtraID    pgtype.UUID `db:"extra_id" json:"extraId"`
	OperatorID pgtype.UUID `db:"operator_id" json:"operatorId"`
}

func (q *Queries) UpdateExtraOperator(ctx context.Context, arg UpdateExtraOperatorParams) (ExtraOperator, error) {
	row := q.db.QueryRow(ctx, updateExtraOperator, arg.ID, arg.ExtraID, arg.OperatorID)
	var i ExtraOperator
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ExtraID,
		&i.OperatorID,
	)
	return i, err
}
