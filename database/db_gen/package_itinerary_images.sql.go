// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package_itinerary_images.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackageItineraryImagesByPackageItineraryId = `-- name: CountPackageItineraryImagesByPackageItineraryId :one
SELECT
    COUNT(id)
FROM package_itinerary_images
WHERE package_itinerary_id = $1
`

func (q *Queries) CountPackageItineraryImagesByPackageItineraryId(ctx context.Context, packageItineraryID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPackageItineraryImagesByPackageItineraryId, packageItineraryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackageItineraryImage = `-- name: CreatePackageItineraryImage :one
INSERT INTO package_itinerary_images (
    id,
    created,
    modified,
    package_itinerary_id,
    ordering,
    image,
    image_info,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5
         )
RETURNING id, created, modified, package_itinerary_id, ordering, image, image_info, is_active
`

type CreatePackageItineraryImageParams struct {
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	Ordering           int32       `db:"ordering" json:"ordering"`
	Image              string      `db:"image" json:"image"`
	ImageInfo          string      `db:"image_info" json:"imageInfo"`
	IsActive           bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreatePackageItineraryImage(ctx context.Context, arg CreatePackageItineraryImageParams) (PackageItineraryImages, error) {
	row := q.db.QueryRow(ctx, createPackageItineraryImage,
		arg.PackageItineraryID,
		arg.Ordering,
		arg.Image,
		arg.ImageInfo,
		arg.IsActive,
	)
	var i PackageItineraryImages
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageItineraryID,
		&i.Ordering,
		&i.Image,
		&i.ImageInfo,
		&i.IsActive,
	)
	return i, err
}

const deletePackageItineraryImage = `-- name: DeletePackageItineraryImage :exec
DELETE FROM package_itinerary_images
WHERE id = $1
`

func (q *Queries) DeletePackageItineraryImage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageItineraryImage, id)
	return err
}

const deletePackageItineraryImagesByPackageItineraryId = `-- name: DeletePackageItineraryImagesByPackageItineraryId :exec
DELETE FROM package_itinerary_images
WHERE package_itinerary_id = $1
`

func (q *Queries) DeletePackageItineraryImagesByPackageItineraryId(ctx context.Context, packageItineraryID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageItineraryImagesByPackageItineraryId, packageItineraryID)
	return err
}

const getPackageItineraryImageById = `-- name: GetPackageItineraryImageById :one
SELECT id, created, modified, package_itinerary_id, ordering, image, image_info, is_active FROM package_itinerary_images
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPackageItineraryImageById(ctx context.Context, id pgtype.UUID) (PackageItineraryImages, error) {
	row := q.db.QueryRow(ctx, getPackageItineraryImageById, id)
	var i PackageItineraryImages
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageItineraryID,
		&i.Ordering,
		&i.Image,
		&i.ImageInfo,
		&i.IsActive,
	)
	return i, err
}

const getPackageItineraryImagesByPackageItineraryId = `-- name: GetPackageItineraryImagesByPackageItineraryId :many
SELECT id, created, modified, package_itinerary_id, ordering, image, image_info, is_active FROM package_itinerary_images
WHERE package_itinerary_id = $1
`

func (q *Queries) GetPackageItineraryImagesByPackageItineraryId(ctx context.Context, packageItineraryID pgtype.UUID) ([]PackageItineraryImages, error) {
	rows, err := q.db.Query(ctx, getPackageItineraryImagesByPackageItineraryId, packageItineraryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageItineraryImages
	for rows.Next() {
		var i PackageItineraryImages
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageItineraryID,
			&i.Ordering,
			&i.Image,
			&i.ImageInfo,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageItineraryImagesByPackageItineraryIdAsc = `-- name: ListPackageItineraryImagesByPackageItineraryIdAsc :many
SELECT id, created, modified, package_itinerary_id, ordering, image, image_info, is_active FROM package_itinerary_images
WHERE package_itinerary_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageItineraryImagesByPackageItineraryIdAscParams struct {
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	SortBy             string      `db:"sort_by" json:"sortBy"`
	RequestedPage      int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize  int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageItineraryImagesByPackageItineraryIdAsc(ctx context.Context, arg ListPackageItineraryImagesByPackageItineraryIdAscParams) ([]PackageItineraryImages, error) {
	rows, err := q.db.Query(ctx, listPackageItineraryImagesByPackageItineraryIdAsc,
		arg.PackageItineraryID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageItineraryImages
	for rows.Next() {
		var i PackageItineraryImages
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageItineraryID,
			&i.Ordering,
			&i.Image,
			&i.ImageInfo,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageItineraryImagesByPackageItineraryIdDesc = `-- name: ListPackageItineraryImagesByPackageItineraryIdDesc :many
SELECT id, created, modified, package_itinerary_id, ordering, image, image_info, is_active FROM package_itinerary_images
WHERE package_itinerary_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageItineraryImagesByPackageItineraryIdDescParams struct {
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	SortBy             string      `db:"sort_by" json:"sortBy"`
	RequestedPage      int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize  int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageItineraryImagesByPackageItineraryIdDesc(ctx context.Context, arg ListPackageItineraryImagesByPackageItineraryIdDescParams) ([]PackageItineraryImages, error) {
	rows, err := q.db.Query(ctx, listPackageItineraryImagesByPackageItineraryIdDesc,
		arg.PackageItineraryID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageItineraryImages
	for rows.Next() {
		var i PackageItineraryImages
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageItineraryID,
			&i.Ordering,
			&i.Image,
			&i.ImageInfo,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackageItineraryImage = `-- name: UpdatePackageItineraryImage :one
UPDATE package_itinerary_images
SET
    modified = now() AT TIME ZONE 'UTC',
    package_itinerary_id = $2,
    ordering = $3,
    image = $4,
    image_info = $5,
    is_active = $6
WHERE id = $1
RETURNING id, created, modified, package_itinerary_id, ordering, image, image_info, is_active
`

type UpdatePackageItineraryImageParams struct {
	ID                 pgtype.UUID `db:"id" json:"id"`
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	Ordering           int32       `db:"ordering" json:"ordering"`
	Image              string      `db:"image" json:"image"`
	ImageInfo          string      `db:"image_info" json:"imageInfo"`
	IsActive           bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdatePackageItineraryImage(ctx context.Context, arg UpdatePackageItineraryImageParams) (PackageItineraryImages, error) {
	row := q.db.QueryRow(ctx, updatePackageItineraryImage,
		arg.ID,
		arg.PackageItineraryID,
		arg.Ordering,
		arg.Image,
		arg.ImageInfo,
		arg.IsActive,
	)
	var i PackageItineraryImages
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageItineraryID,
		&i.Ordering,
		&i.Image,
		&i.ImageInfo,
		&i.IsActive,
	)
	return i, err
}
