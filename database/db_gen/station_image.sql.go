// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: station_image.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countStationImagesByStationId = `-- name: CountStationImagesByStationId :one
SELECT
    COUNT(id)
FROM station_image
WHERE station_id = $1
`

func (q *Queries) CountStationImagesByStationId(ctx context.Context, stationID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countStationImagesByStationId, stationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStationImage = `-- name: CreateStationImage :one
INSERT INTO station_image (
    id,
    created,
    modified,
    station_id,
    ordering,
    image,
    image_info
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4
         )
RETURNING id, created, modified, station_id, ordering, image, image_info
`

type CreateStationImageParams struct {
	StationID pgtype.UUID `db:"station_id" json:"stationId"`
	Ordering  int32       `db:"ordering" json:"ordering"`
	Image     string      `db:"image" json:"image"`
	ImageInfo string      `db:"image_info" json:"imageInfo"`
}

func (q *Queries) CreateStationImage(ctx context.Context, arg CreateStationImageParams) (StationImage, error) {
	row := q.db.QueryRow(ctx, createStationImage,
		arg.StationID,
		arg.Ordering,
		arg.Image,
		arg.ImageInfo,
	)
	var i StationImage
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.StationID,
		&i.Ordering,
		&i.Image,
		&i.ImageInfo,
	)
	return i, err
}

const deleteStationImage = `-- name: DeleteStationImage :exec
DELETE FROM station_image
WHERE id = $1
`

func (q *Queries) DeleteStationImage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStationImage, id)
	return err
}

const deleteStationImagesByStationId = `-- name: DeleteStationImagesByStationId :exec
DELETE FROM station_image
WHERE station_id = $1
`

func (q *Queries) DeleteStationImagesByStationId(ctx context.Context, stationID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStationImagesByStationId, stationID)
	return err
}

const getStationImageById = `-- name: GetStationImageById :one
SELECT id, created, modified, station_id, ordering, image, image_info FROM station_image
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetStationImageById(ctx context.Context, id pgtype.UUID) (StationImage, error) {
	row := q.db.QueryRow(ctx, getStationImageById, id)
	var i StationImage
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.StationID,
		&i.Ordering,
		&i.Image,
		&i.ImageInfo,
	)
	return i, err
}

const getStationImagesByStationId = `-- name: GetStationImagesByStationId :many
SELECT id, created, modified, station_id, ordering, image, image_info FROM station_image
WHERE station_id = $1
`

func (q *Queries) GetStationImagesByStationId(ctx context.Context, stationID pgtype.UUID) ([]StationImage, error) {
	rows, err := q.db.Query(ctx, getStationImagesByStationId, stationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StationImage
	for rows.Next() {
		var i StationImage
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.StationID,
			&i.Ordering,
			&i.Image,
			&i.ImageInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStationImagesByStationIdAsc = `-- name: ListStationImagesByStationIdAsc :many
SELECT id, created, modified, station_id, ordering, image, image_info FROM station_image
WHERE station_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListStationImagesByStationIdAscParams struct {
	StationID         pgtype.UUID `db:"station_id" json:"stationId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListStationImagesByStationIdAsc(ctx context.Context, arg ListStationImagesByStationIdAscParams) ([]StationImage, error) {
	rows, err := q.db.Query(ctx, listStationImagesByStationIdAsc,
		arg.StationID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StationImage
	for rows.Next() {
		var i StationImage
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.StationID,
			&i.Ordering,
			&i.Image,
			&i.ImageInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStationImagesByStationIdDesc = `-- name: ListStationImagesByStationIdDesc :many
SELECT id, created, modified, station_id, ordering, image, image_info FROM station_image
WHERE station_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListStationImagesByStationIdDescParams struct {
	StationID         pgtype.UUID `db:"station_id" json:"stationId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListStationImagesByStationIdDesc(ctx context.Context, arg ListStationImagesByStationIdDescParams) ([]StationImage, error) {
	rows, err := q.db.Query(ctx, listStationImagesByStationIdDesc,
		arg.StationID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StationImage
	for rows.Next() {
		var i StationImage
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.StationID,
			&i.Ordering,
			&i.Image,
			&i.ImageInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStationImage = `-- name: UpdateStationImage :one
UPDATE station_image
SET
    modified = now() AT TIME ZONE 'UTC',
    station_id = $2,
    ordering = $3,
    image = $4,
    image_info = $5
WHERE id = $1
RETURNING id, created, modified, station_id, ordering, image, image_info
`

type UpdateStationImageParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	StationID pgtype.UUID `db:"station_id" json:"stationId"`
	Ordering  int32       `db:"ordering" json:"ordering"`
	Image     string      `db:"image" json:"image"`
	ImageInfo string      `db:"image_info" json:"imageInfo"`
}

func (q *Queries) UpdateStationImage(ctx context.Context, arg UpdateStationImageParams) (StationImage, error) {
	row := q.db.QueryRow(ctx, updateStationImage,
		arg.ID,
		arg.StationID,
		arg.Ordering,
		arg.Image,
		arg.ImageInfo,
	)
	var i StationImage
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.StationID,
		&i.Ordering,
		&i.Image,
		&i.ImageInfo,
	)
	return i, err
}
