// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: page_path_extensions.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPagePathExtensionsByPagePathId = `-- name: CountPagePathExtensionsByPagePathId :one
SELECT
    COUNT(id)
FROM page_path_extension
WHERE page_path_id = $1
`

func (q *Queries) CountPagePathExtensionsByPagePathId(ctx context.Context, pagePathID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPagePathExtensionsByPagePathId, pagePathID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPagePathExtension = `-- name: CreatePagePathExtension :one
INSERT INTO page_path_extension (
    id,
    created,
    modified,
    page_path_id,
    extension_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, page_path_id, extension_id
`

type CreatePagePathExtensionParams struct {
	PagePathID  pgtype.UUID `db:"page_path_id" json:"pagePathId"`
	ExtensionID pgtype.UUID `db:"extension_id" json:"extensionId"`
}

func (q *Queries) CreatePagePathExtension(ctx context.Context, arg CreatePagePathExtensionParams) (PagePathExtension, error) {
	row := q.db.QueryRow(ctx, createPagePathExtension, arg.PagePathID, arg.ExtensionID)
	var i PagePathExtension
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PagePathID,
		&i.ExtensionID,
	)
	return i, err
}

const deletePagePathExtension = `-- name: DeletePagePathExtension :exec
DELETE FROM page_path_extension
WHERE id = $1
`

func (q *Queries) DeletePagePathExtension(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePagePathExtension, id)
	return err
}

const deletePagePathExtensionByPagePathId = `-- name: DeletePagePathExtensionByPagePathId :exec
DELETE FROM page_path_extension
WHERE page_path_id = $1
`

func (q *Queries) DeletePagePathExtensionByPagePathId(ctx context.Context, pagePathID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePagePathExtensionByPagePathId, pagePathID)
	return err
}

const getPagePathExtensionById = `-- name: GetPagePathExtensionById :one
SELECT id, created, modified, page_path_id, extension_id FROM page_path_extension
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPagePathExtensionById(ctx context.Context, id pgtype.UUID) (PagePathExtension, error) {
	row := q.db.QueryRow(ctx, getPagePathExtensionById, id)
	var i PagePathExtension
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PagePathID,
		&i.ExtensionID,
	)
	return i, err
}

const listPagePathExtensionsByPagePathId = `-- name: ListPagePathExtensionsByPagePathId :many
SELECT id, created, modified, page_path_id, extension_id FROM page_path_extension
WHERE page_path_id = $1
`

func (q *Queries) ListPagePathExtensionsByPagePathId(ctx context.Context, pagePathID pgtype.UUID) ([]PagePathExtension, error) {
	rows, err := q.db.Query(ctx, listPagePathExtensionsByPagePathId, pagePathID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PagePathExtension
	for rows.Next() {
		var i PagePathExtension
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PagePathID,
			&i.ExtensionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePagePathExtension = `-- name: UpdatePagePathExtension :one
UPDATE page_path_extension
SET
    modified = now() AT TIME ZONE 'UTC',
    page_path_id = $2,
    extension_id = $3
WHERE id = $1
RETURNING id, created, modified, page_path_id, extension_id
`

type UpdatePagePathExtensionParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	PagePathID  pgtype.UUID `db:"page_path_id" json:"pagePathId"`
	ExtensionID pgtype.UUID `db:"extension_id" json:"extensionId"`
}

func (q *Queries) UpdatePagePathExtension(ctx context.Context, arg UpdatePagePathExtensionParams) (PagePathExtension, error) {
	row := q.db.QueryRow(ctx, updatePagePathExtension, arg.ID, arg.PagePathID, arg.ExtensionID)
	var i PagePathExtension
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PagePathID,
		&i.ExtensionID,
	)
	return i, err
}
