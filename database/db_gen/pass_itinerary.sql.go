// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pass_itinerary.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPassItineraries = `-- name: CountPassItineraries :one
SELECT
    COUNT(id)
FROM pass_itinerary
WHERE pass_id = $1
`

func (q *Queries) CountPassItineraries(ctx context.Context, passID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPassItineraries, passID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPassItinerary = `-- name: CreatePassItinerary :one
INSERT INTO pass_itinerary (
    id,
    created,
    modified,
    pass_id,
    title,
    description,
    terms
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4
         )
RETURNING id, created, modified, pass_id, title, description, terms
`

type CreatePassItineraryParams struct {
	PassID      pgtype.UUID `db:"pass_id" json:"passId"`
	Title       string      `db:"title" json:"title"`
	Description string      `db:"description" json:"description"`
	Terms       string      `db:"terms" json:"terms"`
}

func (q *Queries) CreatePassItinerary(ctx context.Context, arg CreatePassItineraryParams) (PassItinerary, error) {
	row := q.db.QueryRow(ctx, createPassItinerary,
		arg.PassID,
		arg.Title,
		arg.Description,
		arg.Terms,
	)
	var i PassItinerary
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.Title,
		&i.Description,
		&i.Terms,
	)
	return i, err
}

const deletePassItinerary = `-- name: DeletePassItinerary :exec
DELETE FROM pass_itinerary
WHERE id = $1
`

func (q *Queries) DeletePassItinerary(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePassItinerary, id)
	return err
}

const getPassItineraryById = `-- name: GetPassItineraryById :one
SELECT id, created, modified, pass_id, title, description, terms FROM pass_itinerary
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPassItineraryById(ctx context.Context, id pgtype.UUID) (PassItinerary, error) {
	row := q.db.QueryRow(ctx, getPassItineraryById, id)
	var i PassItinerary
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.Title,
		&i.Description,
		&i.Terms,
	)
	return i, err
}

const listPassItinerariesByPassId = `-- name: ListPassItinerariesByPassId :many
SELECT id, created, modified, pass_id, title, description, terms FROM pass_itinerary
WHERE pass_id = $1
`

func (q *Queries) ListPassItinerariesByPassId(ctx context.Context, passID pgtype.UUID) ([]PassItinerary, error) {
	rows, err := q.db.Query(ctx, listPassItinerariesByPassId, passID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PassItinerary
	for rows.Next() {
		var i PassItinerary
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PassID,
			&i.Title,
			&i.Description,
			&i.Terms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassItinerary = `-- name: UpdatePassItinerary :one
UPDATE pass_itinerary
SET
    modified = now() AT TIME ZONE 'UTC',
    pass_id = $2,
    title = $3,
    description = $4,
    terms = $5
WHERE id = $1
RETURNING id, created, modified, pass_id, title, description, terms
`

type UpdatePassItineraryParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	PassID      pgtype.UUID `db:"pass_id" json:"passId"`
	Title       string      `db:"title" json:"title"`
	Description string      `db:"description" json:"description"`
	Terms       string      `db:"terms" json:"terms"`
}

func (q *Queries) UpdatePassItinerary(ctx context.Context, arg UpdatePassItineraryParams) (PassItinerary, error) {
	row := q.db.QueryRow(ctx, updatePassItinerary,
		arg.ID,
		arg.PassID,
		arg.Title,
		arg.Description,
		arg.Terms,
	)
	var i PassItinerary
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.Title,
		&i.Description,
		&i.Terms,
	)
	return i, err
}

const upsertPassItinerary = `-- name: UpsertPassItinerary :one
INSERT INTO pass_itinerary (
    id,
    created,
    modified,
    pass_id,
    title,
    description,
    terms
) VALUES (
             coalesce(nullif($5, uuid_nil()), uuid_generate_v4()),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
                $1, $2, $3, $4
         )
ON CONFLICT (id) DO UPDATE
    SET
        modified = now() AT TIME ZONE 'UTC',
        pass_id = $1,
        title = $2,
        description = $3,
        terms = $4
RETURNING id, created, modified, pass_id, title, description, terms
`

type UpsertPassItineraryParams struct {
	PassID      pgtype.UUID `db:"pass_id" json:"passId"`
	Title       string      `db:"title" json:"title"`
	Description string      `db:"description" json:"description"`
	Terms       string      `db:"terms" json:"terms"`
	ID          interface{} `db:"id" json:"id"`
}

func (q *Queries) UpsertPassItinerary(ctx context.Context, arg UpsertPassItineraryParams) (PassItinerary, error) {
	row := q.db.QueryRow(ctx, upsertPassItinerary,
		arg.PassID,
		arg.Title,
		arg.Description,
		arg.Terms,
		arg.ID,
	)
	var i PassItinerary
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.Title,
		&i.Description,
		&i.Terms,
	)
	return i, err
}
