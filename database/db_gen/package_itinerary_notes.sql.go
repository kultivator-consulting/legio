// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package_itinerary_notes.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackageItineraryNotesByPackageItineraryId = `-- name: CountPackageItineraryNotesByPackageItineraryId :one
SELECT
    COUNT(id)
FROM package_itinerary_notes
WHERE package_itinerary_id = $1
`

func (q *Queries) CountPackageItineraryNotesByPackageItineraryId(ctx context.Context, packageItineraryID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPackageItineraryNotesByPackageItineraryId, packageItineraryID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackageItineraryNotes = `-- name: CreatePackageItineraryNotes :one
INSERT INTO package_itinerary_notes (
    id,
    created,
    modified,
    package_itinerary_id,
    note
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, package_itinerary_id, note
`

type CreatePackageItineraryNotesParams struct {
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	Note               string      `db:"note" json:"note"`
}

func (q *Queries) CreatePackageItineraryNotes(ctx context.Context, arg CreatePackageItineraryNotesParams) (PackageItineraryNotes, error) {
	row := q.db.QueryRow(ctx, createPackageItineraryNotes, arg.PackageItineraryID, arg.Note)
	var i PackageItineraryNotes
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageItineraryID,
		&i.Note,
	)
	return i, err
}

const deletePackageItineraryNotes = `-- name: DeletePackageItineraryNotes :exec
DELETE FROM package_itinerary_notes
WHERE id = $1
`

func (q *Queries) DeletePackageItineraryNotes(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageItineraryNotes, id)
	return err
}

const deletePackageItineraryNotesByPackageItineraryId = `-- name: DeletePackageItineraryNotesByPackageItineraryId :exec
DELETE FROM package_itinerary_notes
WHERE package_itinerary_id = $1
`

func (q *Queries) DeletePackageItineraryNotesByPackageItineraryId(ctx context.Context, packageItineraryID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageItineraryNotesByPackageItineraryId, packageItineraryID)
	return err
}

const getPackageItineraryNotesById = `-- name: GetPackageItineraryNotesById :one
SELECT id, created, modified, package_itinerary_id, note FROM package_itinerary_notes
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPackageItineraryNotesById(ctx context.Context, id pgtype.UUID) (PackageItineraryNotes, error) {
	row := q.db.QueryRow(ctx, getPackageItineraryNotesById, id)
	var i PackageItineraryNotes
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageItineraryID,
		&i.Note,
	)
	return i, err
}

const getPackageItineraryNotesByPackageItineraryId = `-- name: GetPackageItineraryNotesByPackageItineraryId :many
SELECT id, created, modified, package_itinerary_id, note FROM package_itinerary_notes
WHERE package_itinerary_id = $1
`

func (q *Queries) GetPackageItineraryNotesByPackageItineraryId(ctx context.Context, packageItineraryID pgtype.UUID) ([]PackageItineraryNotes, error) {
	rows, err := q.db.Query(ctx, getPackageItineraryNotesByPackageItineraryId, packageItineraryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageItineraryNotes
	for rows.Next() {
		var i PackageItineraryNotes
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageItineraryID,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageItineraryNotesByPackageItineraryIdAsc = `-- name: ListPackageItineraryNotesByPackageItineraryIdAsc :many
SELECT id, created, modified, package_itinerary_id, note FROM package_itinerary_notes
WHERE package_itinerary_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageItineraryNotesByPackageItineraryIdAscParams struct {
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	SortBy             string      `db:"sort_by" json:"sortBy"`
	RequestedPage      int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize  int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageItineraryNotesByPackageItineraryIdAsc(ctx context.Context, arg ListPackageItineraryNotesByPackageItineraryIdAscParams) ([]PackageItineraryNotes, error) {
	rows, err := q.db.Query(ctx, listPackageItineraryNotesByPackageItineraryIdAsc,
		arg.PackageItineraryID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageItineraryNotes
	for rows.Next() {
		var i PackageItineraryNotes
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageItineraryID,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageItineraryNotesByPackageItineraryIdDesc = `-- name: ListPackageItineraryNotesByPackageItineraryIdDesc :many
SELECT id, created, modified, package_itinerary_id, note FROM package_itinerary_notes
WHERE package_itinerary_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageItineraryNotesByPackageItineraryIdDescParams struct {
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	SortBy             string      `db:"sort_by" json:"sortBy"`
	RequestedPage      int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize  int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageItineraryNotesByPackageItineraryIdDesc(ctx context.Context, arg ListPackageItineraryNotesByPackageItineraryIdDescParams) ([]PackageItineraryNotes, error) {
	rows, err := q.db.Query(ctx, listPackageItineraryNotesByPackageItineraryIdDesc,
		arg.PackageItineraryID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageItineraryNotes
	for rows.Next() {
		var i PackageItineraryNotes
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageItineraryID,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackageItineraryNotes = `-- name: UpdatePackageItineraryNotes :one
UPDATE package_itinerary_notes
SET
    modified = now() AT TIME ZONE 'UTC',
    package_itinerary_id = $2,
    note = $3
WHERE id = $1
RETURNING id, created, modified, package_itinerary_id, note
`

type UpdatePackageItineraryNotesParams struct {
	ID                 pgtype.UUID `db:"id" json:"id"`
	PackageItineraryID pgtype.UUID `db:"package_itinerary_id" json:"packageItineraryId"`
	Note               string      `db:"note" json:"note"`
}

func (q *Queries) UpdatePackageItineraryNotes(ctx context.Context, arg UpdatePackageItineraryNotesParams) (PackageItineraryNotes, error) {
	row := q.db.QueryRow(ctx, updatePackageItineraryNotes, arg.ID, arg.PackageItineraryID, arg.Note)
	var i PackageItineraryNotes
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageItineraryID,
		&i.Note,
	)
	return i, err
}
