// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: file_tag.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFileTag = `-- name: AddFileTag :one
INSERT INTO file_tag (
    id,
    created,
    file_store_id,
    tag
) VALUES (
     uuid_generate_v4(),
     now() AT TIME ZONE 'UTC',
     $1, $2
)
RETURNING id, created, file_store_id, tag
`

type AddFileTagParams struct {
	FileStoreID pgtype.UUID `db:"file_store_id" json:"fileStoreId"`
	Tag         string      `db:"tag" json:"tag"`
}

func (q *Queries) AddFileTag(ctx context.Context, arg AddFileTagParams) (FileTag, error) {
	row := q.db.QueryRow(ctx, addFileTag, arg.FileStoreID, arg.Tag)
	var i FileTag
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.FileStoreID,
		&i.Tag,
	)
	return i, err
}

const deleteFileTag = `-- name: DeleteFileTag :exec
DELETE FROM file_tag
WHERE id = $1
`

func (q *Queries) DeleteFileTag(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFileTag, id)
	return err
}

const deleteFileTagsByFileStoreId = `-- name: DeleteFileTagsByFileStoreId :exec
DELETE FROM file_tag
WHERE file_store_id = $1
`

func (q *Queries) DeleteFileTagsByFileStoreId(ctx context.Context, fileStoreID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFileTagsByFileStoreId, fileStoreID)
	return err
}

const listFileTagByFileStoreId = `-- name: ListFileTagByFileStoreId :many
SELECT id, created, file_store_id, tag FROM file_tag
WHERE file_store_id = $1
`

func (q *Queries) ListFileTagByFileStoreId(ctx context.Context, fileStoreID pgtype.UUID) ([]FileTag, error) {
	rows, err := q.db.Query(ctx, listFileTagByFileStoreId, fileStoreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileTag
	for rows.Next() {
		var i FileTag
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.FileStoreID,
			&i.Tag,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
