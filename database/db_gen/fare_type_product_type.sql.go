// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fare_type_product_type.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countFareTypeProductTypesByFareTypeId = `-- name: CountFareTypeProductTypesByFareTypeId :one
SELECT
    COUNT(id)
FROM fare_type_product_type
WHERE fare_type_id = $1
`

func (q *Queries) CountFareTypeProductTypesByFareTypeId(ctx context.Context, fareTypeID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countFareTypeProductTypesByFareTypeId, fareTypeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFareTypeProductType = `-- name: CreateFareTypeProductType :one
INSERT INTO fare_type_product_type (
    id,
    created,
    modified,
    fare_type_id,
    product_type_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, fare_type_id, product_type_id
`

type CreateFareTypeProductTypeParams struct {
	FareTypeID    pgtype.UUID `db:"fare_type_id" json:"fareTypeId"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
}

func (q *Queries) CreateFareTypeProductType(ctx context.Context, arg CreateFareTypeProductTypeParams) (FareTypeProductType, error) {
	row := q.db.QueryRow(ctx, createFareTypeProductType, arg.FareTypeID, arg.ProductTypeID)
	var i FareTypeProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.FareTypeID,
		&i.ProductTypeID,
	)
	return i, err
}

const deleteFareTypeProductType = `-- name: DeleteFareTypeProductType :exec
DELETE FROM fare_type_product_type
WHERE id = $1
`

func (q *Queries) DeleteFareTypeProductType(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFareTypeProductType, id)
	return err
}

const deleteFareTypeProductTypesByFareTypeId = `-- name: DeleteFareTypeProductTypesByFareTypeId :exec
DELETE FROM fare_type_product_type
WHERE fare_type_id = $1
`

func (q *Queries) DeleteFareTypeProductTypesByFareTypeId(ctx context.Context, fareTypeID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFareTypeProductTypesByFareTypeId, fareTypeID)
	return err
}

const getFareTypeProductTypes = `-- name: GetFareTypeProductTypes :one
SELECT id, created, modified, fare_type_id, product_type_id FROM fare_type_product_type
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetFareTypeProductTypes(ctx context.Context, id pgtype.UUID) (FareTypeProductType, error) {
	row := q.db.QueryRow(ctx, getFareTypeProductTypes, id)
	var i FareTypeProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.FareTypeID,
		&i.ProductTypeID,
	)
	return i, err
}

const listFareTypeProductTypesByFareTypeId = `-- name: ListFareTypeProductTypesByFareTypeId :many
SELECT id, created, modified, fare_type_id, product_type_id FROM fare_type_product_type
WHERE fare_type_id = $1
`

func (q *Queries) ListFareTypeProductTypesByFareTypeId(ctx context.Context, fareTypeID pgtype.UUID) ([]FareTypeProductType, error) {
	rows, err := q.db.Query(ctx, listFareTypeProductTypesByFareTypeId, fareTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FareTypeProductType
	for rows.Next() {
		var i FareTypeProductType
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.FareTypeID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFareTypeProductType = `-- name: UpdateFareTypeProductType :one
UPDATE fare_type_product_type
SET
    modified = now() AT TIME ZONE 'UTC',
    fare_type_id = $2,
    product_type_id = $3
WHERE id = $1
RETURNING id, created, modified, fare_type_id, product_type_id
`

type UpdateFareTypeProductTypeParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	FareTypeID    pgtype.UUID `db:"fare_type_id" json:"fareTypeId"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
}

func (q *Queries) UpdateFareTypeProductType(ctx context.Context, arg UpdateFareTypeProductTypeParams) (FareTypeProductType, error) {
	row := q.db.QueryRow(ctx, updateFareTypeProductType, arg.ID, arg.FareTypeID, arg.ProductTypeID)
	var i FareTypeProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.FareTypeID,
		&i.ProductTypeID,
	)
	return i, err
}
