// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: station_product_type.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countStationProductTypesByStationId = `-- name: CountStationProductTypesByStationId :one
SELECT
    COUNT(id)
FROM station_product_type
WHERE station_id = $1
`

func (q *Queries) CountStationProductTypesByStationId(ctx context.Context, stationID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countStationProductTypesByStationId, stationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStationProductType = `-- name: CreateStationProductType :one
INSERT INTO station_product_type (
    id,
    created,
    modified,
    station_id,
    product_type_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, station_id, product_type_id
`

type CreateStationProductTypeParams struct {
	StationID     pgtype.UUID `db:"station_id" json:"stationId"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
}

func (q *Queries) CreateStationProductType(ctx context.Context, arg CreateStationProductTypeParams) (StationProductType, error) {
	row := q.db.QueryRow(ctx, createStationProductType, arg.StationID, arg.ProductTypeID)
	var i StationProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.StationID,
		&i.ProductTypeID,
	)
	return i, err
}

const deleteStationProductType = `-- name: DeleteStationProductType :exec
DELETE FROM station_product_type
WHERE id = $1
`

func (q *Queries) DeleteStationProductType(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStationProductType, id)
	return err
}

const deleteStationProductTypesByStationId = `-- name: DeleteStationProductTypesByStationId :exec
DELETE FROM station_product_type
WHERE station_id = $1
`

func (q *Queries) DeleteStationProductTypesByStationId(ctx context.Context, stationID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStationProductTypesByStationId, stationID)
	return err
}

const getStationProductTypeById = `-- name: GetStationProductTypeById :one
SELECT id, created, modified, station_id, product_type_id FROM station_product_type
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetStationProductTypeById(ctx context.Context, id pgtype.UUID) (StationProductType, error) {
	row := q.db.QueryRow(ctx, getStationProductTypeById, id)
	var i StationProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.StationID,
		&i.ProductTypeID,
	)
	return i, err
}

const getStationProductTypeByStationId = `-- name: GetStationProductTypeByStationId :many
SELECT id, created, modified, station_id, product_type_id FROM station_product_type
WHERE station_id = $1
`

func (q *Queries) GetStationProductTypeByStationId(ctx context.Context, stationID pgtype.UUID) ([]StationProductType, error) {
	rows, err := q.db.Query(ctx, getStationProductTypeByStationId, stationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StationProductType
	for rows.Next() {
		var i StationProductType
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.StationID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStationProductTypesByStationIdAsc = `-- name: ListStationProductTypesByStationIdAsc :many
SELECT id, created, modified, station_id, product_type_id FROM station_product_type
WHERE station_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListStationProductTypesByStationIdAscParams struct {
	StationID         pgtype.UUID `db:"station_id" json:"stationId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListStationProductTypesByStationIdAsc(ctx context.Context, arg ListStationProductTypesByStationIdAscParams) ([]StationProductType, error) {
	rows, err := q.db.Query(ctx, listStationProductTypesByStationIdAsc,
		arg.StationID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StationProductType
	for rows.Next() {
		var i StationProductType
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.StationID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStationProductTypesByStationIdDesc = `-- name: ListStationProductTypesByStationIdDesc :many
SELECT id, created, modified, station_id, product_type_id FROM station_product_type
WHERE station_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListStationProductTypesByStationIdDescParams struct {
	StationID         pgtype.UUID `db:"station_id" json:"stationId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListStationProductTypesByStationIdDesc(ctx context.Context, arg ListStationProductTypesByStationIdDescParams) ([]StationProductType, error) {
	rows, err := q.db.Query(ctx, listStationProductTypesByStationIdDesc,
		arg.StationID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []StationProductType
	for rows.Next() {
		var i StationProductType
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.StationID,
			&i.ProductTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStationProductType = `-- name: UpdateStationProductType :one
UPDATE station_product_type
SET
    modified = now() AT TIME ZONE 'UTC',
    station_id = $2,
    product_type_id = $3
WHERE id = $1
RETURNING id, created, modified, station_id, product_type_id
`

type UpdateStationProductTypeParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	StationID     pgtype.UUID `db:"station_id" json:"stationId"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
}

func (q *Queries) UpdateStationProductType(ctx context.Context, arg UpdateStationProductTypeParams) (StationProductType, error) {
	row := q.db.QueryRow(ctx, updateStationProductType, arg.ID, arg.StationID, arg.ProductTypeID)
	var i StationProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.StationID,
		&i.ProductTypeID,
	)
	return i, err
}
