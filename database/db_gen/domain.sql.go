// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: domain.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countDomains = `-- name: CountDomains :one
SELECT
    COUNT(id)
FROM domain
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountDomains(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countDomains)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createDomain = `-- name: CreateDomain :one
INSERT INTO domain (
    id,
    created,
    modified,
    deleted,
    name,
    description,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3
         )
RETURNING id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active
`

type CreateDomainParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateDomain(ctx context.Context, arg CreateDomainParams) (Domain, error) {
	row := q.db.QueryRow(ctx, createDomain, arg.Name, arg.Description, arg.IsActive)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.IsCmsControlled,
		&i.IsUnderMaintenance,
		&i.IsActive,
	)
	return i, err
}

const createDomainAndReturnId = `-- name: CreateDomainAndReturnId :one
INSERT INTO domain (
    id,
    created,
    modified,
    deleted,
    name,
    description,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3
         )
RETURNING id
`

type CreateDomainAndReturnIdParams struct {
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateDomainAndReturnId(ctx context.Context, arg CreateDomainAndReturnIdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createDomainAndReturnId, arg.Name, arg.Description, arg.IsActive)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteDomain = `-- name: DeleteDomain :exec
UPDATE domain
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteDomain(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteDomain, id)
	return err
}

const getDomain = `-- name: GetDomain :one
SELECT id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active FROM domain
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetDomain(ctx context.Context, id pgtype.UUID) (Domain, error) {
	row := q.db.QueryRow(ctx, getDomain, id)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.IsCmsControlled,
		&i.IsUnderMaintenance,
		&i.IsActive,
	)
	return i, err
}

const getDomainByDomainName = `-- name: GetDomainByDomainName :one
SELECT id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active FROM domain
WHERE name = $1
  AND deleted > now() AT TIME ZONE 'UTC'
  AND is_active = TRUE
LIMIT 1
`

func (q *Queries) GetDomainByDomainName(ctx context.Context, name string) (Domain, error) {
	row := q.db.QueryRow(ctx, getDomainByDomainName, name)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.IsCmsControlled,
		&i.IsUnderMaintenance,
		&i.IsActive,
	)
	return i, err
}

const getDomainById = `-- name: GetDomainById :one
SELECT id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active FROM domain
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetDomainById(ctx context.Context, id pgtype.UUID) (Domain, error) {
	row := q.db.QueryRow(ctx, getDomainById, id)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.IsCmsControlled,
		&i.IsUnderMaintenance,
		&i.IsActive,
	)
	return i, err
}

const getUnlockedDomainById = `-- name: GetUnlockedDomainById :one
SELECT id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active FROM domain
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
  AND is_active = FALSE
LIMIT 1
`

func (q *Queries) GetUnlockedDomainById(ctx context.Context, id pgtype.UUID) (Domain, error) {
	row := q.db.QueryRow(ctx, getUnlockedDomainById, id)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.IsCmsControlled,
		&i.IsUnderMaintenance,
		&i.IsActive,
	)
	return i, err
}

const listDomainsAsc = `-- name: ListDomainsAsc :many
SELECT id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active FROM domain
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListDomainsAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListDomainsAsc(ctx context.Context, arg ListDomainsAscParams) ([]Domain, error) {
	rows, err := q.db.Query(ctx, listDomainsAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Name,
			&i.Description,
			&i.IsCmsControlled,
			&i.IsUnderMaintenance,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDomainsDesc = `-- name: ListDomainsDesc :many
SELECT id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active FROM domain
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListDomainsDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListDomainsDesc(ctx context.Context, arg ListDomainsDescParams) ([]Domain, error) {
	rows, err := q.db.Query(ctx, listDomainsDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Domain
	for rows.Next() {
		var i Domain
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Name,
			&i.Description,
			&i.IsCmsControlled,
			&i.IsUnderMaintenance,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDomain = `-- name: UpdateDomain :one
UPDATE domain
SET
    modified = now() AT TIME ZONE 'UTC',
    name = $2,
    description = $3,
    is_active = $4
WHERE id = $1
RETURNING id, created, modified, deleted, name, description, is_cms_controlled, is_under_maintenance, is_active
`

type UpdateDomainParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateDomain(ctx context.Context, arg UpdateDomainParams) (Domain, error) {
	row := q.db.QueryRow(ctx, updateDomain,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsActive,
	)
	var i Domain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Description,
		&i.IsCmsControlled,
		&i.IsUnderMaintenance,
		&i.IsActive,
	)
	return i, err
}
