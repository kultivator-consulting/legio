// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: cart.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countCarts = `-- name: CountCarts :one
SELECT
    COUNT(id)
FROM cart
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountCarts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countCarts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCart = `-- name: CreateCart :one
INSERT INTO cart (
    id,
    created,
    modified,
    deleted,
    cart_session_id,
    domain_id,
    completed
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3
         )
RETURNING id, created, modified, deleted, cart_session_id, domain_id, completed
`

type CreateCartParams struct {
	CartSessionID string      `db:"cart_session_id" json:"cartSessionId"`
	DomainID      pgtype.UUID `db:"domain_id" json:"domainId"`
	Completed     bool        `db:"completed" json:"completed"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, createCart, arg.CartSessionID, arg.DomainID, arg.Completed)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.CartSessionID,
		&i.DomainID,
		&i.Completed,
	)
	return i, err
}

const deleteCartById = `-- name: DeleteCartById :exec
UPDATE cart
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteCartById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteCartById, id)
	return err
}

const getCartByCartSessionId = `-- name: GetCartByCartSessionId :one
SELECT id, created, modified, deleted, cart_session_id, domain_id, completed FROM cart
WHERE cart_session_id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetCartByCartSessionId(ctx context.Context, cartSessionID string) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartByCartSessionId, cartSessionID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.CartSessionID,
		&i.DomainID,
		&i.Completed,
	)
	return i, err
}

const getCartById = `-- name: GetCartById :one
SELECT id, created, modified, deleted, cart_session_id, domain_id, completed FROM cart
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetCartById(ctx context.Context, id pgtype.UUID) (Cart, error) {
	row := q.db.QueryRow(ctx, getCartById, id)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.CartSessionID,
		&i.DomainID,
		&i.Completed,
	)
	return i, err
}

const listAllCarts = `-- name: ListAllCarts :many
SELECT id, created, modified, deleted, cart_session_id, domain_id, completed FROM cart
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY created
`

func (q *Queries) ListAllCarts(ctx context.Context) ([]Cart, error) {
	rows, err := q.db.Query(ctx, listAllCarts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.CartSessionID,
			&i.DomainID,
			&i.Completed,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCartById = `-- name: UpdateCartById :one
UPDATE cart
SET
    modified = now() AT TIME ZONE 'UTC',
    cart_session_id = $2,
    domain_id = $3,
    completed = $4
WHERE id = $1
RETURNING id, created, modified, deleted, cart_session_id, domain_id, completed
`

type UpdateCartByIdParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	CartSessionID string      `db:"cart_session_id" json:"cartSessionId"`
	DomainID      pgtype.UUID `db:"domain_id" json:"domainId"`
	Completed     bool        `db:"completed" json:"completed"`
}

func (q *Queries) UpdateCartById(ctx context.Context, arg UpdateCartByIdParams) (Cart, error) {
	row := q.db.QueryRow(ctx, updateCartById,
		arg.ID,
		arg.CartSessionID,
		arg.DomainID,
		arg.Completed,
	)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.CartSessionID,
		&i.DomainID,
		&i.Completed,
	)
	return i, err
}
