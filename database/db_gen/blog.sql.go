// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blog.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countBlogs = `-- name: CountBlogs :one
SELECT
    COUNT(id)
FROM blog
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountBlogs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countBlogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createBlog = `-- name: CreateBlog :one
INSERT INTO blog (
    id,
    created,
    modified,
    deleted,
    domain_id,
    account_id,
    page_id,
    title,
    description,
    image,
    image_info,
    keywords,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7, $8, $9
         )
RETURNING id, created, modified, deleted, domain_id, account_id, page_id, title, description, image, image_info, keywords, is_active
`

type CreateBlogParams struct {
	DomainID    pgtype.UUID `db:"domain_id" json:"domainId"`
	AccountID   pgtype.UUID `db:"account_id" json:"accountId"`
	PageID      pgtype.UUID `db:"page_id" json:"pageId"`
	Title       string      `db:"title" json:"title"`
	Description string      `db:"description" json:"description"`
	Image       string      `db:"image" json:"image"`
	ImageInfo   string      `db:"image_info" json:"imageInfo"`
	Keywords    []string    `db:"keywords" json:"keywords"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateBlog(ctx context.Context, arg CreateBlogParams) (Blog, error) {
	row := q.db.QueryRow(ctx, createBlog,
		arg.DomainID,
		arg.AccountID,
		arg.PageID,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.ImageInfo,
		arg.Keywords,
		arg.IsActive,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.AccountID,
		&i.PageID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.ImageInfo,
		&i.Keywords,
		&i.IsActive,
	)
	return i, err
}

const deleteBlogById = `-- name: DeleteBlogById :exec
UPDATE blog
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteBlogById(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteBlogById, id)
	return err
}

const getBlogByDomainIdAndId = `-- name: GetBlogByDomainIdAndId :one
SELECT id, created, modified, deleted, domain_id, account_id, page_id, title, description, image, image_info, keywords, is_active FROM blog
WHERE domain_id = $1
  AND id = $2
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

type GetBlogByDomainIdAndIdParams struct {
	DomainID pgtype.UUID `db:"domain_id" json:"domainId"`
	ID       pgtype.UUID `db:"id" json:"id"`
}

func (q *Queries) GetBlogByDomainIdAndId(ctx context.Context, arg GetBlogByDomainIdAndIdParams) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlogByDomainIdAndId, arg.DomainID, arg.ID)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.AccountID,
		&i.PageID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.ImageInfo,
		&i.Keywords,
		&i.IsActive,
	)
	return i, err
}

const getBlogById = `-- name: GetBlogById :one
SELECT id, created, modified, deleted, domain_id, account_id, page_id, title, description, image, image_info, keywords, is_active FROM blog
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetBlogById(ctx context.Context, id pgtype.UUID) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlogById, id)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.AccountID,
		&i.PageID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.ImageInfo,
		&i.Keywords,
		&i.IsActive,
	)
	return i, err
}

const getBlogByPageId = `-- name: GetBlogByPageId :one
SELECT id, created, modified, deleted, domain_id, account_id, page_id, title, description, image, image_info, keywords, is_active FROM blog
WHERE page_id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetBlogByPageId(ctx context.Context, pageID pgtype.UUID) (Blog, error) {
	row := q.db.QueryRow(ctx, getBlogByPageId, pageID)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.AccountID,
		&i.PageID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.ImageInfo,
		&i.Keywords,
		&i.IsActive,
	)
	return i, err
}

const listAllBlogs = `-- name: ListAllBlogs :many
SELECT id, created, modified, deleted, domain_id, account_id, page_id, title, description, image, image_info, keywords, is_active FROM blog
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY title
`

func (q *Queries) ListAllBlogs(ctx context.Context) ([]Blog, error) {
	rows, err := q.db.Query(ctx, listAllBlogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blog
	for rows.Next() {
		var i Blog
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.DomainID,
			&i.AccountID,
			&i.PageID,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.ImageInfo,
			&i.Keywords,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBlogById = `-- name: UpdateBlogById :one
UPDATE blog
SET
    modified = now() AT TIME ZONE 'UTC',
    domain_id = $2,
    account_id = $3,
    page_id = $4,
    title = $5,
    description = $6,
    image = $7,
    image_info = $8,
    keywords = $9,
    is_active = $10
WHERE id = $1
RETURNING id, created, modified, deleted, domain_id, account_id, page_id, title, description, image, image_info, keywords, is_active
`

type UpdateBlogByIdParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	DomainID    pgtype.UUID `db:"domain_id" json:"domainId"`
	AccountID   pgtype.UUID `db:"account_id" json:"accountId"`
	PageID      pgtype.UUID `db:"page_id" json:"pageId"`
	Title       string      `db:"title" json:"title"`
	Description string      `db:"description" json:"description"`
	Image       string      `db:"image" json:"image"`
	ImageInfo   string      `db:"image_info" json:"imageInfo"`
	Keywords    []string    `db:"keywords" json:"keywords"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateBlogById(ctx context.Context, arg UpdateBlogByIdParams) (Blog, error) {
	row := q.db.QueryRow(ctx, updateBlogById,
		arg.ID,
		arg.DomainID,
		arg.AccountID,
		arg.PageID,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.ImageInfo,
		arg.Keywords,
		arg.IsActive,
	)
	var i Blog
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.DomainID,
		&i.AccountID,
		&i.PageID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.ImageInfo,
		&i.Keywords,
		&i.IsActive,
	)
	return i, err
}
