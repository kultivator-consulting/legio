// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package_domains.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackageDomainsByPackageId = `-- name: CountPackageDomainsByPackageId :one
SELECT
    COUNT(id)
FROM package_domains
WHERE package_id = $1
`

func (q *Queries) CountPackageDomainsByPackageId(ctx context.Context, packageID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPackageDomainsByPackageId, packageID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackageDomain = `-- name: CreatePackageDomain :one
INSERT INTO package_domains (
    id,
    created,
    modified,
    package_id,
    domain_id
) VALUES (
     uuid_generate_v4(),
     now() AT TIME ZONE 'UTC',
     now() AT TIME ZONE 'UTC',
     $1, $2
 )
RETURNING id, created, modified, package_id, domain_id
`

type CreatePackageDomainParams struct {
	PackageID pgtype.UUID `db:"package_id" json:"packageId"`
	DomainID  pgtype.UUID `db:"domain_id" json:"domainId"`
}

func (q *Queries) CreatePackageDomain(ctx context.Context, arg CreatePackageDomainParams) (PackageDomains, error) {
	row := q.db.QueryRow(ctx, createPackageDomain, arg.PackageID, arg.DomainID)
	var i PackageDomains
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.DomainID,
	)
	return i, err
}

const deletePackageDomain = `-- name: DeletePackageDomain :exec
DELETE FROM package_domains
WHERE id = $1
`

func (q *Queries) DeletePackageDomain(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageDomain, id)
	return err
}

const deletePackageDomainsByPackageId = `-- name: DeletePackageDomainsByPackageId :exec
DELETE FROM package_domains
WHERE package_id = $1
`

func (q *Queries) DeletePackageDomainsByPackageId(ctx context.Context, packageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageDomainsByPackageId, packageID)
	return err
}

const getPackageDomainById = `-- name: GetPackageDomainById :one
SELECT id, created, modified, package_id, domain_id FROM package_domains
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPackageDomainById(ctx context.Context, id pgtype.UUID) (PackageDomains, error) {
	row := q.db.QueryRow(ctx, getPackageDomainById, id)
	var i PackageDomains
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.DomainID,
	)
	return i, err
}

const getPackageDomainsByPackageId = `-- name: GetPackageDomainsByPackageId :many
SELECT id, created, modified, package_id, domain_id FROM package_domains
WHERE package_id = $1
`

func (q *Queries) GetPackageDomainsByPackageId(ctx context.Context, packageID pgtype.UUID) ([]PackageDomains, error) {
	rows, err := q.db.Query(ctx, getPackageDomainsByPackageId, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageDomains
	for rows.Next() {
		var i PackageDomains
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageDomainsByDomainIdAsc = `-- name: ListPackageDomainsByDomainIdAsc :many
SELECT id, created, modified, package_id, domain_id FROM package_domains
WHERE domain_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageDomainsByDomainIdAscParams struct {
	DomainID          pgtype.UUID `db:"domain_id" json:"domainId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageDomainsByDomainIdAsc(ctx context.Context, arg ListPackageDomainsByDomainIdAscParams) ([]PackageDomains, error) {
	rows, err := q.db.Query(ctx, listPackageDomainsByDomainIdAsc,
		arg.DomainID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageDomains
	for rows.Next() {
		var i PackageDomains
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageDomainsByDomainIdDesc = `-- name: ListPackageDomainsByDomainIdDesc :many
SELECT id, created, modified, package_id, domain_id FROM package_domains
WHERE domain_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageDomainsByDomainIdDescParams struct {
	DomainID          pgtype.UUID `db:"domain_id" json:"domainId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageDomainsByDomainIdDesc(ctx context.Context, arg ListPackageDomainsByDomainIdDescParams) ([]PackageDomains, error) {
	rows, err := q.db.Query(ctx, listPackageDomainsByDomainIdDesc,
		arg.DomainID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageDomains
	for rows.Next() {
		var i PackageDomains
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageDomainsByPackageIdAsc = `-- name: ListPackageDomainsByPackageIdAsc :many
SELECT id, created, modified, package_id, domain_id FROM package_domains
WHERE package_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageDomainsByPackageIdAscParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageDomainsByPackageIdAsc(ctx context.Context, arg ListPackageDomainsByPackageIdAscParams) ([]PackageDomains, error) {
	rows, err := q.db.Query(ctx, listPackageDomainsByPackageIdAsc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageDomains
	for rows.Next() {
		var i PackageDomains
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageDomainsByPackageIdDesc = `-- name: ListPackageDomainsByPackageIdDesc :many
SELECT id, created, modified, package_id, domain_id FROM package_domains
WHERE package_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageDomainsByPackageIdDescParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageDomainsByPackageIdDesc(ctx context.Context, arg ListPackageDomainsByPackageIdDescParams) ([]PackageDomains, error) {
	rows, err := q.db.Query(ctx, listPackageDomainsByPackageIdDesc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageDomains
	for rows.Next() {
		var i PackageDomains
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackageDomain = `-- name: UpdatePackageDomain :one
UPDATE package_domains
SET
    modified = now() AT TIME ZONE 'UTC',
    package_id = $2,
    domain_id = $3
WHERE id = $1
RETURNING id, created, modified, package_id, domain_id
`

type UpdatePackageDomainParams struct {
	ID        pgtype.UUID `db:"id" json:"id"`
	PackageID pgtype.UUID `db:"package_id" json:"packageId"`
	DomainID  pgtype.UUID `db:"domain_id" json:"domainId"`
}

func (q *Queries) UpdatePackageDomain(ctx context.Context, arg UpdatePackageDomainParams) (PackageDomains, error) {
	row := q.db.QueryRow(ctx, updatePackageDomain, arg.ID, arg.PackageID, arg.DomainID)
	var i PackageDomains
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.DomainID,
	)
	return i, err
}
