// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pass_product_type.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPassProductTypes = `-- name: CountPassProductTypes :one
SELECT
    COUNT(id)
FROM pass_product_type
WHERE pass_id = $1
`

func (q *Queries) CountPassProductTypes(ctx context.Context, passID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPassProductTypes, passID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPassProductType = `-- name: CreatePassProductType :one
INSERT INTO pass_product_type (
    id,
    created,
    modified,
    pass_id,
    product_type_id,
    category
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3
         )
RETURNING id, created, modified, pass_id, product_type_id, category
`

type CreatePassProductTypeParams struct {
	PassID        pgtype.UUID `db:"pass_id" json:"passId"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
	Category      string      `db:"category" json:"category"`
}

func (q *Queries) CreatePassProductType(ctx context.Context, arg CreatePassProductTypeParams) (PassProductType, error) {
	row := q.db.QueryRow(ctx, createPassProductType, arg.PassID, arg.ProductTypeID, arg.Category)
	var i PassProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.ProductTypeID,
		&i.Category,
	)
	return i, err
}

const deletePassProductType = `-- name: DeletePassProductType :exec
DELETE FROM pass_product_type
WHERE id = $1
`

func (q *Queries) DeletePassProductType(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePassProductType, id)
	return err
}

const deletePassProductTypeByPassId = `-- name: DeletePassProductTypeByPassId :exec
DELETE FROM pass_product_type
WHERE pass_id = $1
`

func (q *Queries) DeletePassProductTypeByPassId(ctx context.Context, passID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePassProductTypeByPassId, passID)
	return err
}

const getPassProductTypeById = `-- name: GetPassProductTypeById :one
SELECT id, created, modified, pass_id, product_type_id, category FROM pass_product_type
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPassProductTypeById(ctx context.Context, id pgtype.UUID) (PassProductType, error) {
	row := q.db.QueryRow(ctx, getPassProductTypeById, id)
	var i PassProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.ProductTypeID,
		&i.Category,
	)
	return i, err
}

const listPassProductTypesByPassId = `-- name: ListPassProductTypesByPassId :many
SELECT id, created, modified, pass_id, product_type_id, category FROM pass_product_type
WHERE pass_id = $1
`

func (q *Queries) ListPassProductTypesByPassId(ctx context.Context, passID pgtype.UUID) ([]PassProductType, error) {
	rows, err := q.db.Query(ctx, listPassProductTypesByPassId, passID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PassProductType
	for rows.Next() {
		var i PassProductType
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PassID,
			&i.ProductTypeID,
			&i.Category,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassProductType = `-- name: UpdatePassProductType :one
UPDATE pass_product_type
SET
    modified = now() AT TIME ZONE 'UTC',
    pass_id = $2,
    product_type_id = $3,
    category = $4
WHERE id = $1
RETURNING id, created, modified, pass_id, product_type_id, category
`

type UpdatePassProductTypeParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	PassID        pgtype.UUID `db:"pass_id" json:"passId"`
	ProductTypeID pgtype.UUID `db:"product_type_id" json:"productTypeId"`
	Category      string      `db:"category" json:"category"`
}

func (q *Queries) UpdatePassProductType(ctx context.Context, arg UpdatePassProductTypeParams) (PassProductType, error) {
	row := q.db.QueryRow(ctx, updatePassProductType,
		arg.ID,
		arg.PassID,
		arg.ProductTypeID,
		arg.Category,
	)
	var i PassProductType
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.ProductTypeID,
		&i.Category,
	)
	return i, err
}
