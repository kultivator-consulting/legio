// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pass_domain.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPassDomains = `-- name: CountPassDomains :one
SELECT
    COUNT(id)
FROM pass_domain
WHERE pass_id = $1
`

func (q *Queries) CountPassDomains(ctx context.Context, passID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPassDomains, passID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPassDomain = `-- name: CreatePassDomain :one
INSERT INTO pass_domain (
    id,
    created,
    modified,
    pass_id,
    domain_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, pass_id, domain_id
`

type CreatePassDomainParams struct {
	PassID   pgtype.UUID `db:"pass_id" json:"passId"`
	DomainID pgtype.UUID `db:"domain_id" json:"domainId"`
}

func (q *Queries) CreatePassDomain(ctx context.Context, arg CreatePassDomainParams) (PassDomain, error) {
	row := q.db.QueryRow(ctx, createPassDomain, arg.PassID, arg.DomainID)
	var i PassDomain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.DomainID,
	)
	return i, err
}

const deletePassDomain = `-- name: DeletePassDomain :exec
DELETE FROM pass_domain
WHERE id = $1
`

func (q *Queries) DeletePassDomain(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePassDomain, id)
	return err
}

const deletePassDomainByPassId = `-- name: DeletePassDomainByPassId :exec
DELETE FROM pass_domain
WHERE pass_id = $1
`

func (q *Queries) DeletePassDomainByPassId(ctx context.Context, passID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePassDomainByPassId, passID)
	return err
}

const getPassDomainById = `-- name: GetPassDomainById :one
SELECT id, created, modified, pass_id, domain_id FROM pass_domain
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPassDomainById(ctx context.Context, id pgtype.UUID) (PassDomain, error) {
	row := q.db.QueryRow(ctx, getPassDomainById, id)
	var i PassDomain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.DomainID,
	)
	return i, err
}

const listPassDomainsByPassId = `-- name: ListPassDomainsByPassId :many
SELECT id, created, modified, pass_id, domain_id FROM pass_domain
WHERE pass_id = $1
`

func (q *Queries) ListPassDomainsByPassId(ctx context.Context, passID pgtype.UUID) ([]PassDomain, error) {
	rows, err := q.db.Query(ctx, listPassDomainsByPassId, passID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PassDomain
	for rows.Next() {
		var i PassDomain
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PassID,
			&i.DomainID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassDomain = `-- name: UpdatePassDomain :one
UPDATE pass_domain
SET
    modified = now() AT TIME ZONE 'UTC',
    pass_id = $2,
    domain_id = $3
WHERE id = $1
RETURNING id, created, modified, pass_id, domain_id
`

type UpdatePassDomainParams struct {
	ID       pgtype.UUID `db:"id" json:"id"`
	PassID   pgtype.UUID `db:"pass_id" json:"passId"`
	DomainID pgtype.UUID `db:"domain_id" json:"domainId"`
}

func (q *Queries) UpdatePassDomain(ctx context.Context, arg UpdatePassDomainParams) (PassDomain, error) {
	row := q.db.QueryRow(ctx, updatePassDomain, arg.ID, arg.PassID, arg.DomainID)
	var i PassDomain
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PassID,
		&i.DomainID,
	)
	return i, err
}
