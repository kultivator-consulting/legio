// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package_included_activities.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackageIncludedActivitiesByPackageId = `-- name: CountPackageIncludedActivitiesByPackageId :one
SELECT
    COUNT(id)
FROM package_included_activities
WHERE package_id = $1
`

func (q *Queries) CountPackageIncludedActivitiesByPackageId(ctx context.Context, packageID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countPackageIncludedActivitiesByPackageId, packageID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackageIncludedActivities = `-- name: CreatePackageIncludedActivities :one
INSERT INTO package_included_activities (
    id,
    created,
    modified,
    package_id,
    ordering,
    title,
    description,
    hero_image,
    hero_image_info,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7
         )
RETURNING id, created, modified, package_id, ordering, title, description, hero_image, hero_image_info, is_active
`

type CreatePackageIncludedActivitiesParams struct {
	PackageID     pgtype.UUID `db:"package_id" json:"packageId"`
	Ordering      int32       `db:"ordering" json:"ordering"`
	Title         string      `db:"title" json:"title"`
	Description   pgtype.Text `db:"description" json:"description"`
	HeroImage     string      `db:"hero_image" json:"heroImage"`
	HeroImageInfo string      `db:"hero_image_info" json:"heroImageInfo"`
	IsActive      bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreatePackageIncludedActivities(ctx context.Context, arg CreatePackageIncludedActivitiesParams) (PackageIncludedActivities, error) {
	row := q.db.QueryRow(ctx, createPackageIncludedActivities,
		arg.PackageID,
		arg.Ordering,
		arg.Title,
		arg.Description,
		arg.HeroImage,
		arg.HeroImageInfo,
		arg.IsActive,
	)
	var i PackageIncludedActivities
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Ordering,
		&i.Title,
		&i.Description,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.IsActive,
	)
	return i, err
}

const deletePackageIncludedActivities = `-- name: DeletePackageIncludedActivities :exec
DELETE FROM package_included_activities
WHERE id = $1
`

func (q *Queries) DeletePackageIncludedActivities(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageIncludedActivities, id)
	return err
}

const deletePackageIncludedActivitiesByPackageId = `-- name: DeletePackageIncludedActivitiesByPackageId :exec
DELETE FROM package_included_activities
WHERE package_id = $1
`

func (q *Queries) DeletePackageIncludedActivitiesByPackageId(ctx context.Context, packageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackageIncludedActivitiesByPackageId, packageID)
	return err
}

const getPackageIncludedActivitiesById = `-- name: GetPackageIncludedActivitiesById :one
SELECT id, created, modified, package_id, ordering, title, description, hero_image, hero_image_info, is_active FROM package_included_activities
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPackageIncludedActivitiesById(ctx context.Context, id pgtype.UUID) (PackageIncludedActivities, error) {
	row := q.db.QueryRow(ctx, getPackageIncludedActivitiesById, id)
	var i PackageIncludedActivities
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Ordering,
		&i.Title,
		&i.Description,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.IsActive,
	)
	return i, err
}

const getPackageIncludedActivitiesByPackageId = `-- name: GetPackageIncludedActivitiesByPackageId :many
SELECT id, created, modified, package_id, ordering, title, description, hero_image, hero_image_info, is_active FROM package_included_activities
WHERE package_id = $1
`

func (q *Queries) GetPackageIncludedActivitiesByPackageId(ctx context.Context, packageID pgtype.UUID) ([]PackageIncludedActivities, error) {
	rows, err := q.db.Query(ctx, getPackageIncludedActivitiesByPackageId, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageIncludedActivities
	for rows.Next() {
		var i PackageIncludedActivities
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Ordering,
			&i.Title,
			&i.Description,
			&i.HeroImage,
			&i.HeroImageInfo,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageIncludedActivitiesByPackageIdAsc = `-- name: ListPackageIncludedActivitiesByPackageIdAsc :many
SELECT id, created, modified, package_id, ordering, title, description, hero_image, hero_image_info, is_active FROM package_included_activities
WHERE package_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageIncludedActivitiesByPackageIdAscParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageIncludedActivitiesByPackageIdAsc(ctx context.Context, arg ListPackageIncludedActivitiesByPackageIdAscParams) ([]PackageIncludedActivities, error) {
	rows, err := q.db.Query(ctx, listPackageIncludedActivitiesByPackageIdAsc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageIncludedActivities
	for rows.Next() {
		var i PackageIncludedActivities
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Ordering,
			&i.Title,
			&i.Description,
			&i.HeroImage,
			&i.HeroImageInfo,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackageIncludedActivitiesByPackageIdDesc = `-- name: ListPackageIncludedActivitiesByPackageIdDesc :many
SELECT id, created, modified, package_id, ordering, title, description, hero_image, hero_image_info, is_active FROM package_included_activities
WHERE package_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackageIncludedActivitiesByPackageIdDescParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackageIncludedActivitiesByPackageIdDesc(ctx context.Context, arg ListPackageIncludedActivitiesByPackageIdDescParams) ([]PackageIncludedActivities, error) {
	rows, err := q.db.Query(ctx, listPackageIncludedActivitiesByPackageIdDesc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageIncludedActivities
	for rows.Next() {
		var i PackageIncludedActivities
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Ordering,
			&i.Title,
			&i.Description,
			&i.HeroImage,
			&i.HeroImageInfo,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackageIncludedActivities = `-- name: UpdatePackageIncludedActivities :one
UPDATE package_included_activities
SET
    modified = now() AT TIME ZONE 'UTC',
    package_id = $2,
    ordering = $3,
    title = $4,
    description = $5,
    hero_image = $6,
    hero_image_info = $7,
    is_active = $8
WHERE id = $1
RETURNING id, created, modified, package_id, ordering, title, description, hero_image, hero_image_info, is_active
`

type UpdatePackageIncludedActivitiesParams struct {
	ID            pgtype.UUID `db:"id" json:"id"`
	PackageID     pgtype.UUID `db:"package_id" json:"packageId"`
	Ordering      int32       `db:"ordering" json:"ordering"`
	Title         string      `db:"title" json:"title"`
	Description   pgtype.Text `db:"description" json:"description"`
	HeroImage     string      `db:"hero_image" json:"heroImage"`
	HeroImageInfo string      `db:"hero_image_info" json:"heroImageInfo"`
	IsActive      bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdatePackageIncludedActivities(ctx context.Context, arg UpdatePackageIncludedActivitiesParams) (PackageIncludedActivities, error) {
	row := q.db.QueryRow(ctx, updatePackageIncludedActivities,
		arg.ID,
		arg.PackageID,
		arg.Ordering,
		arg.Title,
		arg.Description,
		arg.HeroImage,
		arg.HeroImageInfo,
		arg.IsActive,
	)
	var i PackageIncludedActivities
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Ordering,
		&i.Title,
		&i.Description,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.IsActive,
	)
	return i, err
}
