// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackages = `-- name: CountPackages :one
SELECT
    COUNT(id)
FROM package
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountPackages(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPackages)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackage = `-- name: CreatePackage :one
INSERT INTO package (
    id,
    created,
    modified,
    deleted,
    title,
    slug,
    code,
    introduction,
    hero_image,
    hero_image_info,
    duration,
    required_deposit,
    departs,
    destinations,
    route,
    description,
    included_description,
    activities_description,
    journey_map,
    island_filter,
    keywords,
    is_group_journey,
    is_active
) VALUES (
     uuid_generate_v4(),
     now() AT TIME ZONE 'UTC',
     now() AT TIME ZONE 'UTC',
     'infinity'::timestamp AT TIME ZONE 'UTC',
     $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
 )
RETURNING id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active
`

type CreatePackageParams struct {
	Title                 string         `db:"title" json:"title"`
	Slug                  string         `db:"slug" json:"slug"`
	Code                  string         `db:"code" json:"code"`
	Introduction          string         `db:"introduction" json:"introduction"`
	HeroImage             string         `db:"hero_image" json:"heroImage"`
	HeroImageInfo         string         `db:"hero_image_info" json:"heroImageInfo"`
	Duration              string         `db:"duration" json:"duration"`
	RequiredDeposit       pgtype.Numeric `db:"required_deposit" json:"requiredDeposit"`
	Departs               string         `db:"departs" json:"departs"`
	Destinations          []string       `db:"destinations" json:"destinations"`
	Route                 []string       `db:"route" json:"route"`
	Description           string         `db:"description" json:"description"`
	IncludedDescription   string         `db:"included_description" json:"includedDescription"`
	ActivitiesDescription string         `db:"activities_description" json:"activitiesDescription"`
	JourneyMap            string         `db:"journey_map" json:"journeyMap"`
	IslandFilter          string         `db:"island_filter" json:"islandFilter"`
	Keywords              string         `db:"keywords" json:"keywords"`
	IsGroupJourney        bool           `db:"is_group_journey" json:"isGroupJourney"`
	IsActive              bool           `db:"is_active" json:"isActive"`
}

func (q *Queries) CreatePackage(ctx context.Context, arg CreatePackageParams) (Package, error) {
	row := q.db.QueryRow(ctx, createPackage,
		arg.Title,
		arg.Slug,
		arg.Code,
		arg.Introduction,
		arg.HeroImage,
		arg.HeroImageInfo,
		arg.Duration,
		arg.RequiredDeposit,
		arg.Departs,
		arg.Destinations,
		arg.Route,
		arg.Description,
		arg.IncludedDescription,
		arg.ActivitiesDescription,
		arg.JourneyMap,
		arg.IslandFilter,
		arg.Keywords,
		arg.IsGroupJourney,
		arg.IsActive,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Title,
		&i.Slug,
		&i.Code,
		&i.Introduction,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.Duration,
		&i.RequiredDeposit,
		&i.Departs,
		&i.Destinations,
		&i.Route,
		&i.Description,
		&i.IncludedDescription,
		&i.ActivitiesDescription,
		&i.JourneyMap,
		&i.IslandFilter,
		&i.Keywords,
		&i.IsGroupJourney,
		&i.IsActive,
	)
	return i, err
}

const deletePackage = `-- name: DeletePackage :exec
UPDATE package
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeletePackage(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackage, id)
	return err
}

const getPackageByCode = `-- name: GetPackageByCode :one
SELECT id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active FROM package
WHERE code = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetPackageByCode(ctx context.Context, code string) (Package, error) {
	row := q.db.QueryRow(ctx, getPackageByCode, code)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Title,
		&i.Slug,
		&i.Code,
		&i.Introduction,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.Duration,
		&i.RequiredDeposit,
		&i.Departs,
		&i.Destinations,
		&i.Route,
		&i.Description,
		&i.IncludedDescription,
		&i.ActivitiesDescription,
		&i.JourneyMap,
		&i.IslandFilter,
		&i.Keywords,
		&i.IsGroupJourney,
		&i.IsActive,
	)
	return i, err
}

const getPackageById = `-- name: GetPackageById :one
SELECT id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active FROM package
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetPackageById(ctx context.Context, id pgtype.UUID) (Package, error) {
	row := q.db.QueryRow(ctx, getPackageById, id)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Title,
		&i.Slug,
		&i.Code,
		&i.Introduction,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.Duration,
		&i.RequiredDeposit,
		&i.Departs,
		&i.Destinations,
		&i.Route,
		&i.Description,
		&i.IncludedDescription,
		&i.ActivitiesDescription,
		&i.JourneyMap,
		&i.IslandFilter,
		&i.Keywords,
		&i.IsGroupJourney,
		&i.IsActive,
	)
	return i, err
}

const getPackageBySlug = `-- name: GetPackageBySlug :one
SELECT id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active FROM package
WHERE slug = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetPackageBySlug(ctx context.Context, slug string) (Package, error) {
	row := q.db.QueryRow(ctx, getPackageBySlug, slug)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Title,
		&i.Slug,
		&i.Code,
		&i.Introduction,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.Duration,
		&i.RequiredDeposit,
		&i.Departs,
		&i.Destinations,
		&i.Route,
		&i.Description,
		&i.IncludedDescription,
		&i.ActivitiesDescription,
		&i.JourneyMap,
		&i.IslandFilter,
		&i.Keywords,
		&i.IsGroupJourney,
		&i.IsActive,
	)
	return i, err
}

const listPackagesAsc = `-- name: ListPackagesAsc :many
SELECT id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active FROM package
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListPackagesAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackagesAsc(ctx context.Context, arg ListPackagesAscParams) ([]Package, error) {
	rows, err := q.db.Query(ctx, listPackagesAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Title,
			&i.Slug,
			&i.Code,
			&i.Introduction,
			&i.HeroImage,
			&i.HeroImageInfo,
			&i.Duration,
			&i.RequiredDeposit,
			&i.Departs,
			&i.Destinations,
			&i.Route,
			&i.Description,
			&i.IncludedDescription,
			&i.ActivitiesDescription,
			&i.JourneyMap,
			&i.IslandFilter,
			&i.Keywords,
			&i.IsGroupJourney,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackagesDesc = `-- name: ListPackagesDesc :many
SELECT id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active FROM package
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListPackagesDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackagesDesc(ctx context.Context, arg ListPackagesDescParams) ([]Package, error) {
	rows, err := q.db.Query(ctx, listPackagesDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Title,
			&i.Slug,
			&i.Code,
			&i.Introduction,
			&i.HeroImage,
			&i.HeroImageInfo,
			&i.Duration,
			&i.RequiredDeposit,
			&i.Departs,
			&i.Destinations,
			&i.Route,
			&i.Description,
			&i.IncludedDescription,
			&i.ActivitiesDescription,
			&i.JourneyMap,
			&i.IslandFilter,
			&i.Keywords,
			&i.IsGroupJourney,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackage = `-- name: UpdatePackage :one
UPDATE package
SET
    modified = now() AT TIME ZONE 'UTC',
    title = $2,
    slug = $3,
    code = $4,
    introduction = $5,
    hero_image = $6,
    hero_image_info = $7,
    duration = $8,
    required_deposit = $9,
    departs = $10,
    destinations = $11,
    route = $12,
    description = $13,
    included_description = $14,
    activities_description = $15,
    journey_map = $16,
    island_filter = $17,
    keywords = $18,
    is_group_journey = $19,
    is_active = $20
WHERE id = $1
RETURNING id, created, modified, deleted, title, slug, code, introduction, hero_image, hero_image_info, duration, required_deposit, departs, destinations, route, description, included_description, activities_description, journey_map, island_filter, keywords, is_group_journey, is_active
`

type UpdatePackageParams struct {
	ID                    pgtype.UUID    `db:"id" json:"id"`
	Title                 string         `db:"title" json:"title"`
	Slug                  string         `db:"slug" json:"slug"`
	Code                  string         `db:"code" json:"code"`
	Introduction          string         `db:"introduction" json:"introduction"`
	HeroImage             string         `db:"hero_image" json:"heroImage"`
	HeroImageInfo         string         `db:"hero_image_info" json:"heroImageInfo"`
	Duration              string         `db:"duration" json:"duration"`
	RequiredDeposit       pgtype.Numeric `db:"required_deposit" json:"requiredDeposit"`
	Departs               string         `db:"departs" json:"departs"`
	Destinations          []string       `db:"destinations" json:"destinations"`
	Route                 []string       `db:"route" json:"route"`
	Description           string         `db:"description" json:"description"`
	IncludedDescription   string         `db:"included_description" json:"includedDescription"`
	ActivitiesDescription string         `db:"activities_description" json:"activitiesDescription"`
	JourneyMap            string         `db:"journey_map" json:"journeyMap"`
	IslandFilter          string         `db:"island_filter" json:"islandFilter"`
	Keywords              string         `db:"keywords" json:"keywords"`
	IsGroupJourney        bool           `db:"is_group_journey" json:"isGroupJourney"`
	IsActive              bool           `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdatePackage(ctx context.Context, arg UpdatePackageParams) (Package, error) {
	row := q.db.QueryRow(ctx, updatePackage,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Code,
		arg.Introduction,
		arg.HeroImage,
		arg.HeroImageInfo,
		arg.Duration,
		arg.RequiredDeposit,
		arg.Departs,
		arg.Destinations,
		arg.Route,
		arg.Description,
		arg.IncludedDescription,
		arg.ActivitiesDescription,
		arg.JourneyMap,
		arg.IslandFilter,
		arg.Keywords,
		arg.IsGroupJourney,
		arg.IsActive,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Title,
		&i.Slug,
		&i.Code,
		&i.Introduction,
		&i.HeroImage,
		&i.HeroImageInfo,
		&i.Duration,
		&i.RequiredDeposit,
		&i.Departs,
		&i.Destinations,
		&i.Route,
		&i.Description,
		&i.IncludedDescription,
		&i.ActivitiesDescription,
		&i.JourneyMap,
		&i.IslandFilter,
		&i.Keywords,
		&i.IsGroupJourney,
		&i.IsActive,
	)
	return i, err
}
