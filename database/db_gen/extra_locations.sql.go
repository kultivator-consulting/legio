// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: extra_locations.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countExtraLocationsByExtraId = `-- name: CountExtraLocationsByExtraId :one
SELECT
    COUNT(id)
FROM extra_location
WHERE extra_id = $1
`

func (q *Queries) CountExtraLocationsByExtraId(ctx context.Context, extraID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExtraLocationsByExtraId, extraID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countExtraLocationsByLocationId = `-- name: CountExtraLocationsByLocationId :one
SELECT
    COUNT(id)
FROM extra_location
WHERE location_id = $1
`

func (q *Queries) CountExtraLocationsByLocationId(ctx context.Context, locationID pgtype.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, countExtraLocationsByLocationId, locationID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createExtraLocation = `-- name: CreateExtraLocation :one
INSERT INTO extra_location (
    id,
    created,
    modified,
    extra_id,
    location_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2
         )
RETURNING id, created, modified, extra_id, location_id
`

type CreateExtraLocationParams struct {
	ExtraID    pgtype.UUID `db:"extra_id" json:"extraId"`
	LocationID pgtype.UUID `db:"location_id" json:"locationId"`
}

func (q *Queries) CreateExtraLocation(ctx context.Context, arg CreateExtraLocationParams) (ExtraLocation, error) {
	row := q.db.QueryRow(ctx, createExtraLocation, arg.ExtraID, arg.LocationID)
	var i ExtraLocation
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ExtraID,
		&i.LocationID,
	)
	return i, err
}

const deleteExtraLocation = `-- name: DeleteExtraLocation :exec
DELETE FROM extra_location
WHERE id = $1
`

func (q *Queries) DeleteExtraLocation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExtraLocation, id)
	return err
}

const deleteExtraLocationByExtraId = `-- name: DeleteExtraLocationByExtraId :exec
DELETE FROM extra_location
WHERE extra_id = $1
`

func (q *Queries) DeleteExtraLocationByExtraId(ctx context.Context, extraID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteExtraLocationByExtraId, extraID)
	return err
}

const getExtraLocationById = `-- name: GetExtraLocationById :one
SELECT id, created, modified, extra_id, location_id FROM extra_location
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetExtraLocationById(ctx context.Context, id pgtype.UUID) (ExtraLocation, error) {
	row := q.db.QueryRow(ctx, getExtraLocationById, id)
	var i ExtraLocation
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ExtraID,
		&i.LocationID,
	)
	return i, err
}

const listExtraLocationsByExtraId = `-- name: ListExtraLocationsByExtraId :many
SELECT id, created, modified, extra_id, location_id FROM extra_location
WHERE extra_id = $1
`

func (q *Queries) ListExtraLocationsByExtraId(ctx context.Context, extraID pgtype.UUID) ([]ExtraLocation, error) {
	rows, err := q.db.Query(ctx, listExtraLocationsByExtraId, extraID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExtraLocation
	for rows.Next() {
		var i ExtraLocation
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ExtraID,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExtraLocationsByLocationId = `-- name: ListExtraLocationsByLocationId :many
SELECT id, created, modified, extra_id, location_id FROM extra_location
WHERE location_id = $1
`

func (q *Queries) ListExtraLocationsByLocationId(ctx context.Context, locationID pgtype.UUID) ([]ExtraLocation, error) {
	rows, err := q.db.Query(ctx, listExtraLocationsByLocationId, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExtraLocation
	for rows.Next() {
		var i ExtraLocation
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.ExtraID,
			&i.LocationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExtraLocation = `-- name: UpdateExtraLocation :one
UPDATE extra_location
SET
    modified = now() AT TIME ZONE 'UTC',
    extra_id = $2,
    location_id = $3
WHERE id = $1
RETURNING id, created, modified, extra_id, location_id
`

type UpdateExtraLocationParams struct {
	ID         pgtype.UUID `db:"id" json:"id"`
	ExtraID    pgtype.UUID `db:"extra_id" json:"extraId"`
	LocationID pgtype.UUID `db:"location_id" json:"locationId"`
}

func (q *Queries) UpdateExtraLocation(ctx context.Context, arg UpdateExtraLocationParams) (ExtraLocation, error) {
	row := q.db.QueryRow(ctx, updateExtraLocation, arg.ID, arg.ExtraID, arg.LocationID)
	var i ExtraLocation
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.ExtraID,
		&i.LocationID,
	)
	return i, err
}
