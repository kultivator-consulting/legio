// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: package_pricing.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countPackagePricing = `-- name: CountPackagePricing :one
SELECT
    COUNT(id)
FROM package_pricing
`

func (q *Queries) CountPackagePricing(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countPackagePricing)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPackagePricing = `-- name: CreatePackagePricing :one
INSERT INTO package_pricing (
    id,
    created,
    modified,
    package_id,
    supplement,
    adult_price,
    child_price,
    infant_price,
    start_date,
    end_date,
    specific_terms
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7, $8
         )
RETURNING id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms
`

type CreatePackagePricingParams struct {
	PackageID     pgtype.UUID        `db:"package_id" json:"packageId"`
	Supplement    string             `db:"supplement" json:"supplement"`
	AdultPrice    pgtype.Numeric     `db:"adult_price" json:"adultPrice"`
	ChildPrice    pgtype.Numeric     `db:"child_price" json:"childPrice"`
	InfantPrice   pgtype.Numeric     `db:"infant_price" json:"infantPrice"`
	StartDate     pgtype.Timestamptz `db:"start_date" json:"startDate"`
	EndDate       pgtype.Timestamptz `db:"end_date" json:"endDate"`
	SpecificTerms string             `db:"specific_terms" json:"specificTerms"`
}

func (q *Queries) CreatePackagePricing(ctx context.Context, arg CreatePackagePricingParams) (PackagePricing, error) {
	row := q.db.QueryRow(ctx, createPackagePricing,
		arg.PackageID,
		arg.Supplement,
		arg.AdultPrice,
		arg.ChildPrice,
		arg.InfantPrice,
		arg.StartDate,
		arg.EndDate,
		arg.SpecificTerms,
	)
	var i PackagePricing
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Supplement,
		&i.AdultPrice,
		&i.ChildPrice,
		&i.InfantPrice,
		&i.StartDate,
		&i.EndDate,
		&i.SpecificTerms,
	)
	return i, err
}

const deletePackagePricing = `-- name: DeletePackagePricing :exec
DELETE FROM package_pricing
WHERE id = $1
`

func (q *Queries) DeletePackagePricing(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackagePricing, id)
	return err
}

const deletePackagePricingByPackageId = `-- name: DeletePackagePricingByPackageId :exec
DELETE FROM package_pricing
WHERE package_id = $1
`

func (q *Queries) DeletePackagePricingByPackageId(ctx context.Context, packageID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deletePackagePricingByPackageId, packageID)
	return err
}

const getPackagePricingById = `-- name: GetPackagePricingById :one
SELECT id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms FROM package_pricing
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPackagePricingById(ctx context.Context, id pgtype.UUID) (PackagePricing, error) {
	row := q.db.QueryRow(ctx, getPackagePricingById, id)
	var i PackagePricing
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Supplement,
		&i.AdultPrice,
		&i.ChildPrice,
		&i.InfantPrice,
		&i.StartDate,
		&i.EndDate,
		&i.SpecificTerms,
	)
	return i, err
}

const getPackagePricingByPackageId = `-- name: GetPackagePricingByPackageId :many
SELECT id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms FROM package_pricing
WHERE package_id = $1
`

func (q *Queries) GetPackagePricingByPackageId(ctx context.Context, packageID pgtype.UUID) ([]PackagePricing, error) {
	rows, err := q.db.Query(ctx, getPackagePricingByPackageId, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackagePricing
	for rows.Next() {
		var i PackagePricing
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Supplement,
			&i.AdultPrice,
			&i.ChildPrice,
			&i.InfantPrice,
			&i.StartDate,
			&i.EndDate,
			&i.SpecificTerms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getValidPackagePricingByDate = `-- name: GetValidPackagePricingByDate :many
SELECT id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms FROM package_pricing
WHERE package_id = $1
  AND start_date <= $2
  AND end_date >= $2
`

type GetValidPackagePricingByDateParams struct {
	PackageID pgtype.UUID        `db:"package_id" json:"packageId"`
	StartDate pgtype.Timestamptz `db:"start_date" json:"startDate"`
}

func (q *Queries) GetValidPackagePricingByDate(ctx context.Context, arg GetValidPackagePricingByDateParams) ([]PackagePricing, error) {
	rows, err := q.db.Query(ctx, getValidPackagePricingByDate, arg.PackageID, arg.StartDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackagePricing
	for rows.Next() {
		var i PackagePricing
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Supplement,
			&i.AdultPrice,
			&i.ChildPrice,
			&i.InfantPrice,
			&i.StartDate,
			&i.EndDate,
			&i.SpecificTerms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackagePricingByPackageIdAsc = `-- name: ListPackagePricingByPackageIdAsc :many
SELECT id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms FROM package_pricing
WHERE package_id = $1
ORDER BY $2::text
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackagePricingByPackageIdAscParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackagePricingByPackageIdAsc(ctx context.Context, arg ListPackagePricingByPackageIdAscParams) ([]PackagePricing, error) {
	rows, err := q.db.Query(ctx, listPackagePricingByPackageIdAsc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackagePricing
	for rows.Next() {
		var i PackagePricing
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Supplement,
			&i.AdultPrice,
			&i.ChildPrice,
			&i.InfantPrice,
			&i.StartDate,
			&i.EndDate,
			&i.SpecificTerms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPackagePricingByPackageIdDesc = `-- name: ListPackagePricingByPackageIdDesc :many
SELECT id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms FROM package_pricing
WHERE package_id = $1
ORDER BY $2::text DESC
OFFSET ($3::int - 1) * $4::int
    FETCH NEXT $4 ROWS ONLY
`

type ListPackagePricingByPackageIdDescParams struct {
	PackageID         pgtype.UUID `db:"package_id" json:"packageId"`
	SortBy            string      `db:"sort_by" json:"sortBy"`
	RequestedPage     int32       `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32       `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListPackagePricingByPackageIdDesc(ctx context.Context, arg ListPackagePricingByPackageIdDescParams) ([]PackagePricing, error) {
	rows, err := q.db.Query(ctx, listPackagePricingByPackageIdDesc,
		arg.PackageID,
		arg.SortBy,
		arg.RequestedPage,
		arg.RequestedPageSize,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackagePricing
	for rows.Next() {
		var i PackagePricing
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.PackageID,
			&i.Supplement,
			&i.AdultPrice,
			&i.ChildPrice,
			&i.InfantPrice,
			&i.StartDate,
			&i.EndDate,
			&i.SpecificTerms,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackagePricing = `-- name: UpdatePackagePricing :one
UPDATE package_pricing
SET
    modified = now() AT TIME ZONE 'UTC',
    package_id = $2,
    supplement = $3,
    adult_price = $4,
    child_price = $5,
    infant_price = $6,
    start_date = $7,
    end_date = $8,
    specific_terms = $9
WHERE id = $1
RETURNING id, created, modified, package_id, supplement, adult_price, child_price, infant_price, start_date, end_date, specific_terms
`

type UpdatePackagePricingParams struct {
	ID            pgtype.UUID        `db:"id" json:"id"`
	PackageID     pgtype.UUID        `db:"package_id" json:"packageId"`
	Supplement    string             `db:"supplement" json:"supplement"`
	AdultPrice    pgtype.Numeric     `db:"adult_price" json:"adultPrice"`
	ChildPrice    pgtype.Numeric     `db:"child_price" json:"childPrice"`
	InfantPrice   pgtype.Numeric     `db:"infant_price" json:"infantPrice"`
	StartDate     pgtype.Timestamptz `db:"start_date" json:"startDate"`
	EndDate       pgtype.Timestamptz `db:"end_date" json:"endDate"`
	SpecificTerms string             `db:"specific_terms" json:"specificTerms"`
}

func (q *Queries) UpdatePackagePricing(ctx context.Context, arg UpdatePackagePricingParams) (PackagePricing, error) {
	row := q.db.QueryRow(ctx, updatePackagePricing,
		arg.ID,
		arg.PackageID,
		arg.Supplement,
		arg.AdultPrice,
		arg.ChildPrice,
		arg.InfantPrice,
		arg.StartDate,
		arg.EndDate,
		arg.SpecificTerms,
	)
	var i PackagePricing
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.PackageID,
		&i.Supplement,
		&i.AdultPrice,
		&i.ChildPrice,
		&i.InfantPrice,
		&i.StartDate,
		&i.EndDate,
		&i.SpecificTerms,
	)
	return i, err
}
