// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: file_meta.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addFileMeta = `-- name: AddFileMeta :one
INSERT INTO file_meta (
    id,
    created,
    file_store_id,
    key,
    value,
    attached_file_store_id
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             $1, $2, $3, $4
         )
RETURNING id, created, file_store_id, key, value, attached_file_store_id
`

type AddFileMetaParams struct {
	FileStoreID         pgtype.UUID `db:"file_store_id" json:"fileStoreId"`
	Key                 string      `db:"key" json:"key"`
	Value               pgtype.Text `db:"value" json:"value"`
	AttachedFileStoreID pgtype.UUID `db:"attached_file_store_id" json:"attachedFileStoreId"`
}

func (q *Queries) AddFileMeta(ctx context.Context, arg AddFileMetaParams) (FileMeta, error) {
	row := q.db.QueryRow(ctx, addFileMeta,
		arg.FileStoreID,
		arg.Key,
		arg.Value,
		arg.AttachedFileStoreID,
	)
	var i FileMeta
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.FileStoreID,
		&i.Key,
		&i.Value,
		&i.AttachedFileStoreID,
	)
	return i, err
}

const deleteFileMetaByFileStoreId = `-- name: DeleteFileMetaByFileStoreId :exec
DELETE FROM file_meta
WHERE file_store_id = $1
`

func (q *Queries) DeleteFileMetaByFileStoreId(ctx context.Context, fileStoreID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFileMetaByFileStoreId, fileStoreID)
	return err
}

const getFileMetaByKey = `-- name: GetFileMetaByKey :one
SELECT id, created, file_store_id, key, value, attached_file_store_id FROM file_meta
WHERE key = $1 LIMIT 1
`

func (q *Queries) GetFileMetaByKey(ctx context.Context, key string) (FileMeta, error) {
	row := q.db.QueryRow(ctx, getFileMetaByKey, key)
	var i FileMeta
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.FileStoreID,
		&i.Key,
		&i.Value,
		&i.AttachedFileStoreID,
	)
	return i, err
}

const listAttachmentsByFileStoreId = `-- name: ListAttachmentsByFileStoreId :many
SELECT attached_file_store_id FROM file_meta
WHERE file_store_id = $1
`

func (q *Queries) ListAttachmentsByFileStoreId(ctx context.Context, fileStoreID pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, listAttachmentsByFileStoreId, fileStoreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var attached_file_store_id pgtype.UUID
		if err := rows.Scan(&attached_file_store_id); err != nil {
			return nil, err
		}
		items = append(items, attached_file_store_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listFileMetaByFileStoreId = `-- name: ListFileMetaByFileStoreId :many
SELECT id, created, file_store_id, key, value, attached_file_store_id FROM file_meta
WHERE file_store_id = $1
`

func (q *Queries) ListFileMetaByFileStoreId(ctx context.Context, fileStoreID pgtype.UUID) ([]FileMeta, error) {
	rows, err := q.db.Query(ctx, listFileMetaByFileStoreId, fileStoreID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FileMeta
	for rows.Next() {
		var i FileMeta
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.FileStoreID,
			&i.Key,
			&i.Value,
			&i.AttachedFileStoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
