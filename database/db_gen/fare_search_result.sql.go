// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fare_search_result.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFareSearchResult = `-- name: CreateFareSearchResult :one
INSERT INTO fare_search_result (
    id,
    created,
    modified,
    deleted,
    fare_search_id,
    product_type_id,
    route_start_location,
    route_end_location,
    fare_date,
    is_return
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6
         )
RETURNING id, created, modified, deleted, fare_search_id, product_type_id, route_start_location, route_end_location, fare_date, is_return
`

type CreateFareSearchResultParams struct {
	FareSearchID       pgtype.UUID        `db:"fare_search_id" json:"fareSearchId"`
	ProductTypeID      pgtype.UUID        `db:"product_type_id" json:"productTypeId"`
	RouteStartLocation string             `db:"route_start_location" json:"routeStartLocation"`
	RouteEndLocation   string             `db:"route_end_location" json:"routeEndLocation"`
	FareDate           pgtype.Timestamptz `db:"fare_date" json:"fareDate"`
	IsReturn           bool               `db:"is_return" json:"isReturn"`
}

func (q *Queries) CreateFareSearchResult(ctx context.Context, arg CreateFareSearchResultParams) (FareSearchResult, error) {
	row := q.db.QueryRow(ctx, createFareSearchResult,
		arg.FareSearchID,
		arg.ProductTypeID,
		arg.RouteStartLocation,
		arg.RouteEndLocation,
		arg.FareDate,
		arg.IsReturn,
	)
	var i FareSearchResult
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.FareSearchID,
		&i.ProductTypeID,
		&i.RouteStartLocation,
		&i.RouteEndLocation,
		&i.FareDate,
		&i.IsReturn,
	)
	return i, err
}

const deleteFareSearchResult = `-- name: DeleteFareSearchResult :exec
UPDATE fare_search_result
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteFareSearchResult(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFareSearchResult, id)
	return err
}

const getFareSearchResultById = `-- name: GetFareSearchResultById :one
SELECT id, created, modified, deleted, fare_search_id, product_type_id, route_start_location, route_end_location, fare_date, is_return FROM fare_search_result
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetFareSearchResultById(ctx context.Context, id pgtype.UUID) (FareSearchResult, error) {
	row := q.db.QueryRow(ctx, getFareSearchResultById, id)
	var i FareSearchResult
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.FareSearchID,
		&i.ProductTypeID,
		&i.RouteStartLocation,
		&i.RouteEndLocation,
		&i.FareDate,
		&i.IsReturn,
	)
	return i, err
}

const listFareSearchResultsByFareSearchId = `-- name: ListFareSearchResultsByFareSearchId :many
SELECT id, created, modified, deleted, fare_search_id, product_type_id, route_start_location, route_end_location, fare_date, is_return FROM fare_search_result
WHERE fare_search_id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) ListFareSearchResultsByFareSearchId(ctx context.Context, fareSearchID pgtype.UUID) ([]FareSearchResult, error) {
	rows, err := q.db.Query(ctx, listFareSearchResultsByFareSearchId, fareSearchID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FareSearchResult
	for rows.Next() {
		var i FareSearchResult
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.FareSearchID,
			&i.ProductTypeID,
			&i.RouteStartLocation,
			&i.RouteEndLocation,
			&i.FareDate,
			&i.IsReturn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFareSearchResult = `-- name: UpdateFareSearchResult :one
UPDATE fare_search_result
SET
    modified = now() AT TIME ZONE 'UTC',
    fare_search_id = $2,
    product_type_id = $3,
    route_start_location = $4,
    route_end_location = $5,
    fare_date = $6,
    is_return = $7
WHERE id = $1
RETURNING id, created, modified, deleted, fare_search_id, product_type_id, route_start_location, route_end_location, fare_date, is_return
`

type UpdateFareSearchResultParams struct {
	ID                 pgtype.UUID        `db:"id" json:"id"`
	FareSearchID       pgtype.UUID        `db:"fare_search_id" json:"fareSearchId"`
	ProductTypeID      pgtype.UUID        `db:"product_type_id" json:"productTypeId"`
	RouteStartLocation string             `db:"route_start_location" json:"routeStartLocation"`
	RouteEndLocation   string             `db:"route_end_location" json:"routeEndLocation"`
	FareDate           pgtype.Timestamptz `db:"fare_date" json:"fareDate"`
	IsReturn           bool               `db:"is_return" json:"isReturn"`
}

func (q *Queries) UpdateFareSearchResult(ctx context.Context, arg UpdateFareSearchResultParams) (FareSearchResult, error) {
	row := q.db.QueryRow(ctx, updateFareSearchResult,
		arg.ID,
		arg.FareSearchID,
		arg.ProductTypeID,
		arg.RouteStartLocation,
		arg.RouteEndLocation,
		arg.FareDate,
		arg.IsReturn,
	)
	var i FareSearchResult
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.FareSearchID,
		&i.ProductTypeID,
		&i.RouteStartLocation,
		&i.RouteEndLocation,
		&i.FareDate,
		&i.IsReturn,
	)
	return i, err
}
