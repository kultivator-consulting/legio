// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: component.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countComponents = `-- name: CountComponents :one
SELECT
    COUNT(id)
FROM component
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountComponents(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countComponents)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createComponentAndReturnId = `-- name: CreateComponentAndReturnId :one
INSERT INTO component (
    id,
    created,
    modified,
    deleted,
    name,
    description,
    icon,
    class_name,
    html_tag,
    child_tag_constraints,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7
         )
RETURNING id
`

type CreateComponentAndReturnIdParams struct {
	Name                string   `db:"name" json:"name"`
	Description         string   `db:"description" json:"description"`
	Icon                string   `db:"icon" json:"icon"`
	ClassName           string   `db:"class_name" json:"className"`
	HtmlTag             string   `db:"html_tag" json:"htmlTag"`
	ChildTagConstraints []string `db:"child_tag_constraints" json:"childTagConstraints"`
	IsActive            bool     `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateComponentAndReturnId(ctx context.Context, arg CreateComponentAndReturnIdParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, createComponentAndReturnId,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.ClassName,
		arg.HtmlTag,
		arg.ChildTagConstraints,
		arg.IsActive,
	)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const deleteComponent = `-- name: DeleteComponent :exec
UPDATE component
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteComponent(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteComponent, id)
	return err
}

const getComponentByClassName = `-- name: GetComponentByClassName :one
SELECT id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active FROM component
WHERE class_name = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetComponentByClassName(ctx context.Context, className string) (Component, error) {
	row := q.db.QueryRow(ctx, getComponentByClassName, className)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.ClassName,
		&i.HtmlTag,
		&i.ChildTagConstraints,
		&i.IsActive,
	)
	return i, err
}

const getComponentByHtmlTag = `-- name: GetComponentByHtmlTag :one
SELECT id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active FROM component
WHERE html_tag = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetComponentByHtmlTag(ctx context.Context, htmlTag string) (Component, error) {
	row := q.db.QueryRow(ctx, getComponentByHtmlTag, htmlTag)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.ClassName,
		&i.HtmlTag,
		&i.ChildTagConstraints,
		&i.IsActive,
	)
	return i, err
}

const getComponentById = `-- name: GetComponentById :one
SELECT id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active FROM component
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetComponentById(ctx context.Context, id pgtype.UUID) (Component, error) {
	row := q.db.QueryRow(ctx, getComponentById, id)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.ClassName,
		&i.HtmlTag,
		&i.ChildTagConstraints,
		&i.IsActive,
	)
	return i, err
}

const getComponentByName = `-- name: GetComponentByName :one
SELECT id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active FROM component
WHERE name = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetComponentByName(ctx context.Context, name string) (Component, error) {
	row := q.db.QueryRow(ctx, getComponentByName, name)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.ClassName,
		&i.HtmlTag,
		&i.ChildTagConstraints,
		&i.IsActive,
	)
	return i, err
}

const listComponentsAsc = `-- name: ListComponentsAsc :many
SELECT id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active FROM component
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListComponentsAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListComponentsAsc(ctx context.Context, arg ListComponentsAscParams) ([]Component, error) {
	rows, err := q.db.Query(ctx, listComponentsAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Component
	for rows.Next() {
		var i Component
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Name,
			&i.Icon,
			&i.Description,
			&i.ClassName,
			&i.HtmlTag,
			&i.ChildTagConstraints,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listComponentsDesc = `-- name: ListComponentsDesc :many
SELECT id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active FROM component
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListComponentsDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListComponentsDesc(ctx context.Context, arg ListComponentsDescParams) ([]Component, error) {
	rows, err := q.db.Query(ctx, listComponentsDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Component
	for rows.Next() {
		var i Component
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.Name,
			&i.Icon,
			&i.Description,
			&i.ClassName,
			&i.HtmlTag,
			&i.ChildTagConstraints,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComponent = `-- name: UpdateComponent :one
UPDATE component
SET
    modified = now() AT TIME ZONE 'UTC',
    name = $2,
    description = $3,
    icon = $4,
    class_name = $5,
    html_tag = $6,
    child_tag_constraints = $7,
    is_active = $8
WHERE id = $1
RETURNING id, created, modified, deleted, name, icon, description, class_name, html_tag, child_tag_constraints, is_active
`

type UpdateComponentParams struct {
	ID                  pgtype.UUID `db:"id" json:"id"`
	Name                string      `db:"name" json:"name"`
	Description         string      `db:"description" json:"description"`
	Icon                string      `db:"icon" json:"icon"`
	ClassName           string      `db:"class_name" json:"className"`
	HtmlTag             string      `db:"html_tag" json:"htmlTag"`
	ChildTagConstraints []string    `db:"child_tag_constraints" json:"childTagConstraints"`
	IsActive            bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateComponent(ctx context.Context, arg UpdateComponentParams) (Component, error) {
	row := q.db.QueryRow(ctx, updateComponent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Icon,
		arg.ClassName,
		arg.HtmlTag,
		arg.ChildTagConstraints,
		arg.IsActive,
	)
	var i Component
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.Name,
		&i.Icon,
		&i.Description,
		&i.ClassName,
		&i.HtmlTag,
		&i.ChildTagConstraints,
		&i.IsActive,
	)
	return i, err
}
