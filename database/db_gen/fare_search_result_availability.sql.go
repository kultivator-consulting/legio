// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: fare_search_result_availability.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFareSearchResultAvailability = `-- name: CreateFareSearchResultAvailability :one
INSERT INTO fare_search_result_availability (
    id,
    created,
    modified,
    deleted,
    fare_search_result_id,
    token,
    fare_date,
    available,
    availability_status,
    service_name,
    departure_city,
    departure_city_info,
    arrival_city,
    arrival_city_info,
    departure_time,
    arrival_time,
    fare_type,
    fare_type_description,
    adult_price,
    child_price,
    infant_price,
    description,
    ticket_conditions
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19
         )
RETURNING id, created, modified, deleted, fare_search_result_id, token, fare_date, available, availability_status, service_name, departure_city, departure_city_info, arrival_city, arrival_city_info, departure_time, arrival_time, fare_type, fare_type_description, adult_price, child_price, infant_price, description, ticket_conditions
`

type CreateFareSearchResultAvailabilityParams struct {
	FareSearchResultID  pgtype.UUID        `db:"fare_search_result_id" json:"fareSearchResultId"`
	Token               pgtype.Text        `db:"token" json:"token"`
	FareDate            pgtype.Timestamptz `db:"fare_date" json:"fareDate"`
	Available           bool               `db:"available" json:"available"`
	AvailabilityStatus  string             `db:"availability_status" json:"availabilityStatus"`
	ServiceName         string             `db:"service_name" json:"serviceName"`
	DepartureCity       string             `db:"departure_city" json:"departureCity"`
	DepartureCityInfo   string             `db:"departure_city_info" json:"departureCityInfo"`
	ArrivalCity         string             `db:"arrival_city" json:"arrivalCity"`
	ArrivalCityInfo     string             `db:"arrival_city_info" json:"arrivalCityInfo"`
	DepartureTime       pgtype.Timestamptz `db:"departure_time" json:"departureTime"`
	ArrivalTime         pgtype.Timestamptz `db:"arrival_time" json:"arrivalTime"`
	FareType            string             `db:"fare_type" json:"fareType"`
	FareTypeDescription string             `db:"fare_type_description" json:"fareTypeDescription"`
	AdultPrice          pgtype.Numeric     `db:"adult_price" json:"adultPrice"`
	ChildPrice          pgtype.Numeric     `db:"child_price" json:"childPrice"`
	InfantPrice         pgtype.Numeric     `db:"infant_price" json:"infantPrice"`
	Description         string             `db:"description" json:"description"`
	TicketConditions    string             `db:"ticket_conditions" json:"ticketConditions"`
}

func (q *Queries) CreateFareSearchResultAvailability(ctx context.Context, arg CreateFareSearchResultAvailabilityParams) (FareSearchResultAvailability, error) {
	row := q.db.QueryRow(ctx, createFareSearchResultAvailability,
		arg.FareSearchResultID,
		arg.Token,
		arg.FareDate,
		arg.Available,
		arg.AvailabilityStatus,
		arg.ServiceName,
		arg.DepartureCity,
		arg.DepartureCityInfo,
		arg.ArrivalCity,
		arg.ArrivalCityInfo,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.FareType,
		arg.FareTypeDescription,
		arg.AdultPrice,
		arg.ChildPrice,
		arg.InfantPrice,
		arg.Description,
		arg.TicketConditions,
	)
	var i FareSearchResultAvailability
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.FareSearchResultID,
		&i.Token,
		&i.FareDate,
		&i.Available,
		&i.AvailabilityStatus,
		&i.ServiceName,
		&i.DepartureCity,
		&i.DepartureCityInfo,
		&i.ArrivalCity,
		&i.ArrivalCityInfo,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.FareType,
		&i.FareTypeDescription,
		&i.AdultPrice,
		&i.ChildPrice,
		&i.InfantPrice,
		&i.Description,
		&i.TicketConditions,
	)
	return i, err
}

const deleteFareSearchResultAvailability = `-- name: DeleteFareSearchResultAvailability :exec
UPDATE fare_search_result_availability
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteFareSearchResultAvailability(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFareSearchResultAvailability, id)
	return err
}

const getFareSearchResultAvailabilityById = `-- name: GetFareSearchResultAvailabilityById :one
SELECT id, created, modified, deleted, fare_search_result_id, token, fare_date, available, availability_status, service_name, departure_city, departure_city_info, arrival_city, arrival_city_info, departure_time, arrival_time, fare_type, fare_type_description, adult_price, child_price, infant_price, description, ticket_conditions FROM fare_search_result_availability
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetFareSearchResultAvailabilityById(ctx context.Context, id pgtype.UUID) (FareSearchResultAvailability, error) {
	row := q.db.QueryRow(ctx, getFareSearchResultAvailabilityById, id)
	var i FareSearchResultAvailability
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.FareSearchResultID,
		&i.Token,
		&i.FareDate,
		&i.Available,
		&i.AvailabilityStatus,
		&i.ServiceName,
		&i.DepartureCity,
		&i.DepartureCityInfo,
		&i.ArrivalCity,
		&i.ArrivalCityInfo,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.FareType,
		&i.FareTypeDescription,
		&i.AdultPrice,
		&i.ChildPrice,
		&i.InfantPrice,
		&i.Description,
		&i.TicketConditions,
	)
	return i, err
}

const listFareSearchResultAvailabilityByFareSearchResultId = `-- name: ListFareSearchResultAvailabilityByFareSearchResultId :many
SELECT id, created, modified, deleted, fare_search_result_id, token, fare_date, available, availability_status, service_name, departure_city, departure_city_info, arrival_city, arrival_city_info, departure_time, arrival_time, fare_type, fare_type_description, adult_price, child_price, infant_price, description, ticket_conditions FROM fare_search_result_availability
WHERE fare_search_result_id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) ListFareSearchResultAvailabilityByFareSearchResultId(ctx context.Context, fareSearchResultID pgtype.UUID) ([]FareSearchResultAvailability, error) {
	rows, err := q.db.Query(ctx, listFareSearchResultAvailabilityByFareSearchResultId, fareSearchResultID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FareSearchResultAvailability
	for rows.Next() {
		var i FareSearchResultAvailability
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.FareSearchResultID,
			&i.Token,
			&i.FareDate,
			&i.Available,
			&i.AvailabilityStatus,
			&i.ServiceName,
			&i.DepartureCity,
			&i.DepartureCityInfo,
			&i.ArrivalCity,
			&i.ArrivalCityInfo,
			&i.DepartureTime,
			&i.ArrivalTime,
			&i.FareType,
			&i.FareTypeDescription,
			&i.AdultPrice,
			&i.ChildPrice,
			&i.InfantPrice,
			&i.Description,
			&i.TicketConditions,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFareSearchResultAvailability = `-- name: UpdateFareSearchResultAvailability :one
UPDATE fare_search_result_availability
SET
    modified = now() AT TIME ZONE 'UTC',
    fare_search_result_id = $2,
    token = $3,
    fare_date = $4,
    available = $5,
    availability_status = $6,
    service_name = $7,
    departure_city = $8,
    departure_city_info = $9,
    arrival_city = $10,
    arrival_city_info = $11,
    departure_time = $12,
    arrival_time = $13,
    fare_type = $14,
    fare_type_description = $15,
    adult_price = $16,
    child_price = $17,
    infant_price = $18,
    description = $19,
    ticket_conditions = $20
WHERE id = $1
RETURNING id, created, modified, deleted, fare_search_result_id, token, fare_date, available, availability_status, service_name, departure_city, departure_city_info, arrival_city, arrival_city_info, departure_time, arrival_time, fare_type, fare_type_description, adult_price, child_price, infant_price, description, ticket_conditions
`

type UpdateFareSearchResultAvailabilityParams struct {
	ID                  pgtype.UUID        `db:"id" json:"id"`
	FareSearchResultID  pgtype.UUID        `db:"fare_search_result_id" json:"fareSearchResultId"`
	Token               pgtype.Text        `db:"token" json:"token"`
	FareDate            pgtype.Timestamptz `db:"fare_date" json:"fareDate"`
	Available           bool               `db:"available" json:"available"`
	AvailabilityStatus  string             `db:"availability_status" json:"availabilityStatus"`
	ServiceName         string             `db:"service_name" json:"serviceName"`
	DepartureCity       string             `db:"departure_city" json:"departureCity"`
	DepartureCityInfo   string             `db:"departure_city_info" json:"departureCityInfo"`
	ArrivalCity         string             `db:"arrival_city" json:"arrivalCity"`
	ArrivalCityInfo     string             `db:"arrival_city_info" json:"arrivalCityInfo"`
	DepartureTime       pgtype.Timestamptz `db:"departure_time" json:"departureTime"`
	ArrivalTime         pgtype.Timestamptz `db:"arrival_time" json:"arrivalTime"`
	FareType            string             `db:"fare_type" json:"fareType"`
	FareTypeDescription string             `db:"fare_type_description" json:"fareTypeDescription"`
	AdultPrice          pgtype.Numeric     `db:"adult_price" json:"adultPrice"`
	ChildPrice          pgtype.Numeric     `db:"child_price" json:"childPrice"`
	InfantPrice         pgtype.Numeric     `db:"infant_price" json:"infantPrice"`
	Description         string             `db:"description" json:"description"`
	TicketConditions    string             `db:"ticket_conditions" json:"ticketConditions"`
}

func (q *Queries) UpdateFareSearchResultAvailability(ctx context.Context, arg UpdateFareSearchResultAvailabilityParams) (FareSearchResultAvailability, error) {
	row := q.db.QueryRow(ctx, updateFareSearchResultAvailability,
		arg.ID,
		arg.FareSearchResultID,
		arg.Token,
		arg.FareDate,
		arg.Available,
		arg.AvailabilityStatus,
		arg.ServiceName,
		arg.DepartureCity,
		arg.DepartureCityInfo,
		arg.ArrivalCity,
		arg.ArrivalCityInfo,
		arg.DepartureTime,
		arg.ArrivalTime,
		arg.FareType,
		arg.FareTypeDescription,
		arg.AdultPrice,
		arg.ChildPrice,
		arg.InfantPrice,
		arg.Description,
		arg.TicketConditions,
	)
	var i FareSearchResultAvailability
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.FareSearchResultID,
		&i.Token,
		&i.FareDate,
		&i.Available,
		&i.AvailabilityStatus,
		&i.ServiceName,
		&i.DepartureCity,
		&i.DepartureCityInfo,
		&i.ArrivalCity,
		&i.ArrivalCityInfo,
		&i.DepartureTime,
		&i.ArrivalTime,
		&i.FareType,
		&i.FareTypeDescription,
		&i.AdultPrice,
		&i.ChildPrice,
		&i.InfantPrice,
		&i.Description,
		&i.TicketConditions,
	)
	return i, err
}
