// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: station.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countStations = `-- name: CountStations :one
SELECT
    COUNT(id)
FROM station
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountStations(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countStations)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createStation = `-- name: CreateStation :one
INSERT INTO station (
    id,
    created,
    modified,
    deleted,
    location_id,
    name,
    address,
    code,
    description,
    latitude,
    longitude,
    stop_id,
    zone_id,
    stop_url,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         )
RETURNING id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active
`

type CreateStationParams struct {
	LocationID  pgtype.UUID `db:"location_id" json:"locationId"`
	Name        string      `db:"name" json:"name"`
	Address     string      `db:"address" json:"address"`
	Code        string      `db:"code" json:"code"`
	Description string      `db:"description" json:"description"`
	Latitude    string      `db:"latitude" json:"latitude"`
	Longitude   string      `db:"longitude" json:"longitude"`
	StopID      string      `db:"stop_id" json:"stopId"`
	ZoneID      string      `db:"zone_id" json:"zoneId"`
	StopUrl     string      `db:"stop_url" json:"stopUrl"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateStation(ctx context.Context, arg CreateStationParams) (Station, error) {
	row := q.db.QueryRow(ctx, createStation,
		arg.LocationID,
		arg.Name,
		arg.Address,
		arg.Code,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
		arg.StopID,
		arg.ZoneID,
		arg.StopUrl,
		arg.IsActive,
	)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.LocationID,
		&i.Name,
		&i.Address,
		&i.Code,
		&i.Description,
		&i.Latitude,
		&i.Longitude,
		&i.StopID,
		&i.ZoneID,
		&i.StopUrl,
		&i.IsActive,
	)
	return i, err
}

const deleteStation = `-- name: DeleteStation :exec
UPDATE station
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteStation(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStation, id)
	return err
}

const getStationById = `-- name: GetStationById :one
SELECT id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active FROM station
WHERE id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
LIMIT 1
`

func (q *Queries) GetStationById(ctx context.Context, id pgtype.UUID) (Station, error) {
	row := q.db.QueryRow(ctx, getStationById, id)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.LocationID,
		&i.Name,
		&i.Address,
		&i.Code,
		&i.Description,
		&i.Latitude,
		&i.Longitude,
		&i.StopID,
		&i.ZoneID,
		&i.StopUrl,
		&i.IsActive,
	)
	return i, err
}

const getStationByName = `-- name: GetStationByName :one
SELECT id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active FROM station
WHERE name = $1
  AND deleted > now() AT TIME ZONE 'UTC'
  AND is_active = TRUE
LIMIT 1
`

func (q *Queries) GetStationByName(ctx context.Context, name string) (Station, error) {
	row := q.db.QueryRow(ctx, getStationByName, name)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.LocationID,
		&i.Name,
		&i.Address,
		&i.Code,
		&i.Description,
		&i.Latitude,
		&i.Longitude,
		&i.StopID,
		&i.ZoneID,
		&i.StopUrl,
		&i.IsActive,
	)
	return i, err
}

const listStationsAsc = `-- name: ListStationsAsc :many
SELECT id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active FROM station
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListStationsAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListStationsAsc(ctx context.Context, arg ListStationsAscParams) ([]Station, error) {
	rows, err := q.db.Query(ctx, listStationsAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.LocationID,
			&i.Name,
			&i.Address,
			&i.Code,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.StopID,
			&i.ZoneID,
			&i.StopUrl,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStationsByLocationId = `-- name: ListStationsByLocationId :many
SELECT id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active FROM station
WHERE location_id = $1
  AND deleted > now() AT TIME ZONE 'UTC'
ORDER BY name
`

func (q *Queries) ListStationsByLocationId(ctx context.Context, locationID pgtype.UUID) ([]Station, error) {
	rows, err := q.db.Query(ctx, listStationsByLocationId, locationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.LocationID,
			&i.Name,
			&i.Address,
			&i.Code,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.StopID,
			&i.ZoneID,
			&i.StopUrl,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStationsDesc = `-- name: ListStationsDesc :many
SELECT id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active FROM station
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListStationsDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListStationsDesc(ctx context.Context, arg ListStationsDescParams) ([]Station, error) {
	rows, err := q.db.Query(ctx, listStationsDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Station
	for rows.Next() {
		var i Station
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.LocationID,
			&i.Name,
			&i.Address,
			&i.Code,
			&i.Description,
			&i.Latitude,
			&i.Longitude,
			&i.StopID,
			&i.ZoneID,
			&i.StopUrl,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStation = `-- name: UpdateStation :one
UPDATE station
SET
    modified = now() AT TIME ZONE 'UTC',
    location_id = $2,
    name = $3,
    address = $4,
    code = $5,
    description = $6,
    latitude = $7,
    longitude = $8,
    stop_id = $9,
    zone_id = $10,
    stop_url = $11,
    is_active = $12
WHERE id = $1
RETURNING id, created, modified, deleted, location_id, name, address, code, description, latitude, longitude, stop_id, zone_id, stop_url, is_active
`

type UpdateStationParams struct {
	ID          pgtype.UUID `db:"id" json:"id"`
	LocationID  pgtype.UUID `db:"location_id" json:"locationId"`
	Name        string      `db:"name" json:"name"`
	Address     string      `db:"address" json:"address"`
	Code        string      `db:"code" json:"code"`
	Description string      `db:"description" json:"description"`
	Latitude    string      `db:"latitude" json:"latitude"`
	Longitude   string      `db:"longitude" json:"longitude"`
	StopID      string      `db:"stop_id" json:"stopId"`
	ZoneID      string      `db:"zone_id" json:"zoneId"`
	StopUrl     string      `db:"stop_url" json:"stopUrl"`
	IsActive    bool        `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateStation(ctx context.Context, arg UpdateStationParams) (Station, error) {
	row := q.db.QueryRow(ctx, updateStation,
		arg.ID,
		arg.LocationID,
		arg.Name,
		arg.Address,
		arg.Code,
		arg.Description,
		arg.Latitude,
		arg.Longitude,
		arg.StopID,
		arg.ZoneID,
		arg.StopUrl,
		arg.IsActive,
	)
	var i Station
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.LocationID,
		&i.Name,
		&i.Address,
		&i.Code,
		&i.Description,
		&i.Latitude,
		&i.Longitude,
		&i.StopID,
		&i.ZoneID,
		&i.StopUrl,
		&i.IsActive,
	)
	return i, err
}
