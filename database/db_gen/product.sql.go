// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: product.sql

package db_gen

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countProducts = `-- name: CountProducts :one
SELECT
    COUNT(id)
FROM product
WHERE deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) CountProducts(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :one
INSERT INTO product (
    id,
    created,
    modified,
    deleted,
    product_type_id,
    operator_id,
    start_location_id,
    end_location_id,
    name,
    start_place,
    end_place,
    operator_code,
    instructions,
    notes,
    is_active
) VALUES (
             uuid_generate_v4(),
             now() AT TIME ZONE 'UTC',
             now() AT TIME ZONE 'UTC',
             'infinity'::timestamp AT TIME ZONE 'UTC',
             $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
         )
RETURNING id, created, modified, deleted, product_type_id, operator_id, start_location_id, end_location_id, name, start_place, end_place, operator_code, instructions, notes, is_active
`

type CreateProductParams struct {
	ProductTypeID   pgtype.UUID `db:"product_type_id" json:"productTypeId"`
	OperatorID      pgtype.UUID `db:"operator_id" json:"operatorId"`
	StartLocationID pgtype.UUID `db:"start_location_id" json:"startLocationId"`
	EndLocationID   pgtype.UUID `db:"end_location_id" json:"endLocationId"`
	Name            string      `db:"name" json:"name"`
	StartPlace      pgtype.Text `db:"start_place" json:"startPlace"`
	EndPlace        pgtype.Text `db:"end_place" json:"endPlace"`
	OperatorCode    pgtype.Text `db:"operator_code" json:"operatorCode"`
	Instructions    pgtype.Text `db:"instructions" json:"instructions"`
	Notes           pgtype.Text `db:"notes" json:"notes"`
	IsActive        pgtype.Bool `db:"is_active" json:"isActive"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct,
		arg.ProductTypeID,
		arg.OperatorID,
		arg.StartLocationID,
		arg.EndLocationID,
		arg.Name,
		arg.StartPlace,
		arg.EndPlace,
		arg.OperatorCode,
		arg.Instructions,
		arg.Notes,
		arg.IsActive,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ProductTypeID,
		&i.OperatorID,
		&i.StartLocationID,
		&i.EndLocationID,
		&i.Name,
		&i.StartPlace,
		&i.EndPlace,
		&i.OperatorCode,
		&i.Instructions,
		&i.Notes,
		&i.IsActive,
	)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE service
SET
    deleted = now() AT TIME ZONE 'UTC'
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProductById = `-- name: GetProductById :one
SELECT id, created, modified, deleted, product_type_id, operator_id, start_location_id, end_location_id, name, start_place, end_place, operator_code, instructions, notes, is_active FROM product
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetProductById(ctx context.Context, id pgtype.UUID) (Product, error) {
	row := q.db.QueryRow(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ProductTypeID,
		&i.OperatorID,
		&i.StartLocationID,
		&i.EndLocationID,
		&i.Name,
		&i.StartPlace,
		&i.EndPlace,
		&i.OperatorCode,
		&i.Instructions,
		&i.Notes,
		&i.IsActive,
	)
	return i, err
}

const listProductByProductTypeId = `-- name: ListProductByProductTypeId :many
SELECT id, created, modified, deleted, product_type_id, operator_id, start_location_id, end_location_id, name, start_place, end_place, operator_code, instructions, notes, is_active FROM product
WHERE product_type_id = $1
AND deleted > now() AT TIME ZONE 'UTC'
`

func (q *Queries) ListProductByProductTypeId(ctx context.Context, productTypeID pgtype.UUID) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductByProductTypeId, productTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.ProductTypeID,
			&i.OperatorID,
			&i.StartLocationID,
			&i.EndLocationID,
			&i.Name,
			&i.StartPlace,
			&i.EndPlace,
			&i.OperatorCode,
			&i.Instructions,
			&i.Notes,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsAsc = `-- name: ListProductsAsc :many
SELECT id, created, modified, deleted, product_type_id, operator_id, start_location_id, end_location_id, name, start_place, end_place, operator_code, instructions, notes, is_active FROM product
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListProductsAscParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListProductsAsc(ctx context.Context, arg ListProductsAscParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsAsc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.ProductTypeID,
			&i.OperatorID,
			&i.StartLocationID,
			&i.EndLocationID,
			&i.Name,
			&i.StartPlace,
			&i.EndPlace,
			&i.OperatorCode,
			&i.Instructions,
			&i.Notes,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsDesc = `-- name: ListProductsDesc :many
SELECT id, created, modified, deleted, product_type_id, operator_id, start_location_id, end_location_id, name, start_place, end_place, operator_code, instructions, notes, is_active FROM product
WHERE deleted > now() AT TIME ZONE 'UTC'
ORDER BY $1::text DESC
OFFSET ($2::int - 1) * $3::int
    FETCH NEXT $3 ROWS ONLY
`

type ListProductsDescParams struct {
	SortBy            string `db:"sort_by" json:"sortBy"`
	RequestedPage     int32  `db:"requested_page" json:"requestedPage"`
	RequestedPageSize int32  `db:"requested_page_size" json:"requestedPageSize"`
}

func (q *Queries) ListProductsDesc(ctx context.Context, arg ListProductsDescParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, listProductsDesc, arg.SortBy, arg.RequestedPage, arg.RequestedPageSize)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Deleted,
			&i.ProductTypeID,
			&i.OperatorID,
			&i.StartLocationID,
			&i.EndLocationID,
			&i.Name,
			&i.StartPlace,
			&i.EndPlace,
			&i.OperatorCode,
			&i.Instructions,
			&i.Notes,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE product
SET
    modified = now() AT TIME ZONE 'UTC',
    product_type_id = $2,
    operator_id = $3,
    start_location_id = $4,
    end_location_id = $5,
    name = $6,
    start_place = $7,
    end_place = $8,
    operator_code = $9,
    instructions = $10,
    notes = $11,
    is_active = $12
WHERE id = $1
RETURNING id, created, modified, deleted, product_type_id, operator_id, start_location_id, end_location_id, name, start_place, end_place, operator_code, instructions, notes, is_active
`

type UpdateProductParams struct {
	ID              pgtype.UUID `db:"id" json:"id"`
	ProductTypeID   pgtype.UUID `db:"product_type_id" json:"productTypeId"`
	OperatorID      pgtype.UUID `db:"operator_id" json:"operatorId"`
	StartLocationID pgtype.UUID `db:"start_location_id" json:"startLocationId"`
	EndLocationID   pgtype.UUID `db:"end_location_id" json:"endLocationId"`
	Name            string      `db:"name" json:"name"`
	StartPlace      pgtype.Text `db:"start_place" json:"startPlace"`
	EndPlace        pgtype.Text `db:"end_place" json:"endPlace"`
	OperatorCode    pgtype.Text `db:"operator_code" json:"operatorCode"`
	Instructions    pgtype.Text `db:"instructions" json:"instructions"`
	Notes           pgtype.Text `db:"notes" json:"notes"`
	IsActive        pgtype.Bool `db:"is_active" json:"isActive"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProduct,
		arg.ID,
		arg.ProductTypeID,
		arg.OperatorID,
		arg.StartLocationID,
		arg.EndLocationID,
		arg.Name,
		arg.StartPlace,
		arg.EndPlace,
		arg.OperatorCode,
		arg.Instructions,
		arg.Notes,
		arg.IsActive,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Deleted,
		&i.ProductTypeID,
		&i.OperatorID,
		&i.StartLocationID,
		&i.EndLocationID,
		&i.Name,
		&i.StartPlace,
		&i.EndPlace,
		&i.OperatorCode,
		&i.Instructions,
		&i.Notes,
		&i.IsActive,
	)
	return i, err
}
